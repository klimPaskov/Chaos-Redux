# ============================================================================
# CHAOS REDUX - SETTINGS EFFECTS
# ============================================================================
# This file contains all scripted effects for the settings system.
# ============================================================================

# ============================================================================
# CONSTANTS
# ============================================================================

# Event System Defaults
@DEFAULT_MIN_DAYS = 25
@DEFAULT_MAX_DAYS = 35
@DEFAULT_MIN_DECREMENT_CAP = 15
@DEFAULT_MAX_DECREMENT_CAP = 5
@DEFAULT_EVENT_WEIGHT = 1000
@DEFAULT_MAJOR_EVENT_WEIGHT_PER_MINOR = 150
@DEFAULT_REDUCE_CAP_FACTOR = 0.5
@DEFAULT_RECOVERY_RATE = 20
@DEFAULT_INCREMENT_MODE = 5

# Chaos Meter Timer Modifiers
@DEFAULT_CHAOS_MODIFIER_CALM = 1.0
@DEFAULT_CHAOS_MODIFIER_GATHERING = 0.8
@DEFAULT_CHAOS_MODIFIER_RISING = 0.7
@DEFAULT_CHAOS_MODIFIER_CHAOS = 0.6
@DEFAULT_CHAOS_MODIFIER_CRITICAL = 0.5
@DEFAULT_CHAOS_MODIFIER_COLLAPSE = 0.5

# Event Type Constants
@EVENT_TYPE_UNKNOWN = 0
@EVENT_TYPE_MAJOR = 1
@EVENT_TYPE_REPEATABLE = 2
@EVENT_TYPE_FIRE_ONCE = 3

# Event Filter Constants
@FILTER_ALL_EVENTS = 0
@FILTER_MAJOR_EVENTS = 1
@FILTER_REPEATABLE_EVENTS = 2
@FILTER_FIRE_ONCE_EVENTS = 3

# Timer System Constants
@TIMER_MAX_MAX_VALUE = 125
@TIMER_MIN_MIN_VALUE = 5
@TIMER_MINIMUM_DAYS = 2
@TIMER_RANDOM_INITIAL_MIN = 7

# Dynamic cap management constants
@DYNAMIC_CAP_STEP_SIZE = 3
@DYNAMIC_CAP_FLOOR_THRESHOLD = 21
@DYNAMIC_CAP_BASE_FACTOR = 5

# Tag Management Constants
@DEFAULT_TAG_MANAGEMENT_MODE = 1

# Country Filter Constants
@COUNTRY_FILTER_ALL = 0
@COUNTRY_FILTER_ENABLED_ONLY = 1
@COUNTRY_FILTER_DISABLED_ONLY = 2

# Continent Sorting Constants
@CONTINENT_SORT_ALPHABETICAL = 0
@CONTINENT_SORT_EUROPE = 1
@CONTINENT_SORT_ASIA = 2
@CONTINENT_SORT_AFRICA = 3
@CONTINENT_SORT_NORTH_AMERICA = 4
@CONTINENT_SORT_SOUTH_AMERICA = 5
@CONTINENT_SORT_OCEANIA = 6
@CONTINENT_SORT_MIDDLE_EAST = 7

# Advanced Settings Constants
@DEFAULT_ADVANCED_INCREMENT_MODE = 10
@ADVANCED_MIN_RECOVERY_RATE = 0
@ADVANCED_MAX_RECOVERY_RATE = 10000
@ADVANCED_MIN_CAP_REDUCTION = 0
@ADVANCED_MAX_CAP_REDUCTION = 1.0
@ADVANCED_MIN_MAJOR_WEIGHT_PER_MINOR = 0
@ADVANCED_MAX_MAJOR_WEIGHT_PER_MINOR = 10000
@ADVANCED_MIN_EVENT_WEIGHT = 100
@ADVANCED_MAX_EVENT_WEIGHT = 5000
@ADVANCED_MIN_TIMER_MODIFIER = 0.1
@ADVANCED_MAX_TIMER_MODIFIER = 2.0

# Chaos Meter Constants
@chaos_tier_0_MIN = 0
@chaos_tier_0_MAX = 199
@chaos_tier_1_MIN = 200
@chaos_tier_1_MAX = 399
@chaos_tier_2_MIN = 400
@chaos_tier_2_MAX = 599
@chaos_tier_3_MIN = 600
@chaos_tier_3_MAX = 799
@chaos_tier_4_MIN = 800
@chaos_tier_4_MAX = 999
@chaos_tier_final_MIN = 1000
@chaos_tier_final_PLUS = 1001
@chaos_tier_0 = 0
@chaos_tier_1 = 1
@chaos_tier_2 = 2
@chaos_tier_3 = 3
@chaos_tier_4 = 4
@chaos_tier_final = 5
@DEFAULT_CHAOS_INCREMENT_MODE = 10

# ============================================================================
# MENU SYSTEM PLACEHOLDERS
# ============================================================================

# Clear all menu content flags
clear_all_menu_flags = {
    clr_country_flag = show_trigger_events_menu
    clr_country_flag = show_timer_system_menu
    clr_country_flag = show_chaos_meter_menu
    clr_country_flag = show_advanced_settings_menu
    clr_country_flag = show_events_view
    clr_country_flag = show_event_clusters_view
    clr_country_flag = show_timer_interval_view
    clr_country_flag = show_tag_management_view
}

# Open timer system menu
open_timer_system_menu = {
    clear_all_menu_flags = yes
    set_country_flag = show_timer_system_menu
    set_country_flag = show_timer_interval_view
    clr_country_flag = show_tag_management_view
}

open_chaos_meter_menu = {
    clear_all_menu_flags = yes
    set_country_flag = show_chaos_meter_menu
}

open_advanced_settings_menu = {
    clear_all_menu_flags = yes
    set_country_flag = show_advanced_settings_menu
}

toggle_scenarios_menu = {
    clear_all_menu_flags = yes
    log = "Toggle Scenarios menu requested (not yet implemented)"
}

# ============================================================================
# SETTINGS WINDOW MANAGEMENT
# ============================================================================

# Open settings window or toggle if already open
open_chaosx_settings = {
    if = {
        limit = { has_country_flag = chaosx_settings_open }
        clr_country_flag = chaosx_settings_open
    }
    else = {
        set_country_flag = chaosx_settings_open
        clear_all_menu_flags = yes

        # Initialize settings variables if needed
        if = {
            limit = { NOT = { has_variable = settings_selected_event_id } }
            set_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN }
        }
        if = {
            limit = { NOT = { has_variable = settings_events_increment_mode } }
            set_variable = { settings_events_increment_mode = @DEFAULT_INCREMENT_MODE }
        }
    }
}

# Close settings window
close_chaosx_settings = {
    clr_country_flag = chaosx_settings_open
    clear_all_menu_flags = yes
}

# ============================================================================
# SETTINGS INITIALIZATION
# ============================================================================

# Initialize settings system with default values (country scoped)
initialize_settings_system = {
    initialize_trigger_events_settings = yes
    initialize_timer_system_settings = yes
    initialize_tag_management_settings = yes
    initialize_chaos_meter_settings = yes
    initialize_advanced_settings = yes
}

initialize_global_settings_system = {
    # Tag management - both defaults are 1, so set the flags
    set_global_flag = settings_auto_enable_on_switch
    set_global_flag = settings_disable_previous_tag

    update_filtered_countries_list = yes

    # chaos meter settings - default is disabled = false, so don't set the flag
    clr_global_flag = settings_chaos_meter_disabled

    # Advanced settings
    set_variable = { global.settings_recovery_rate = global.minor_event_recovery_rate }
    set_variable = { global.settings_cap_reduction = global.reduce_cap_factor }
    set_variable = { global.settings_major_weight_per_minor = global.major_event_weight_per_minor }
    set_variable = { global.settings_event_weight = global.default_event_weight }
    set_variable = { global.settings_timer_modifier = global.chaos_timer_modifier_calm }
}

# Reset all settings to their original values
reset_all_settings = {
    reset_trigger_events = yes
    reset_timer_to_defaults = yes
    update_timer_from_settings = yes
    reset_tag_management_to_defaults = yes
    reset_chaos_meter_to_defaults = yes
    reset_advanced_settings_to_defaults = yes
    update_advanced_settings_values = yes
    log = "CHAOS REDUX SETTINGS: All settings reset and applied to default values"
}




###############################################################################################################

#  ####### ######  ###  #####   #####  ####### ######     ####### #     # ####### #     # #######  #####
#     #    #     #  #  #     # #     # #       #     #    #       #     # #       ##    #    #     #
#     #    #     #  #  #       #       #       #     #    #       #     # #       # #   #    #    #
#     #    ######   #  #  #### #  #### #####   ######     #####   #     # #####   #  #  #    #     #####
#     #    #   #    #  #     # #     # #       #   #      #        #   #  #       #   # #    #          #
#     #    #    #   #  #     # #     # #       #    #     #         # #   #       #    ##    #    #     #
#     #    #     # ###  #####   #####  ####### #     #    #######    #    ####### #     #    #     #####

###############################################################################################################




# Initialize trigger events settings
initialize_trigger_events_settings = {
    set_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN }
    set_variable = { settings_events_increment_mode = @DEFAULT_INCREMENT_MODE }
    set_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS }

    update_event_id_display = yes
}

# Open trigger events menu
open_trigger_events_menu = {
    clear_all_menu_flags = yes
    set_country_flag = show_trigger_events_menu
    set_country_flag = show_events_view
    clr_country_flag = show_event_clusters_view
}

# ============================================================================
# EVENT FILTER SYSTEM
# ============================================================================

# Cycle to previous event filter type
cycle_event_filter_prev = {
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS } }
        set_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS }
    }
    else = {
        subtract_from_variable = { settings_event_id_filter = 1 }
    }

    adjust_event_id_for_filter = yes
    update_event_id_display = yes
}

# Cycle to next event filter type
cycle_event_filter_next = {
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        set_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS }
    }
    else = {
        add_to_variable = { settings_event_id_filter = 1 }
    }

    adjust_event_id_for_filter = yes
    update_event_id_display = yes
}

# Find index of event in specified array
find_event_in_array = {
    # Input: event_id, array_filter_type (1=major, 2=repeatable, 3=fire_once)
    # Output: temp_event_index (-1 if not found)

    set_temp_variable = { temp_event_index = -1 }

    if = {
        limit = { check_variable = { array_filter_type = @FILTER_MAJOR_EVENTS } }
        # Major events
        for_loop_effect = {
            start = 0
            end = global.major_events^num
            value = i
            if = {
                limit = { check_variable = { event_id = global.major_events^i } }
                set_temp_variable = { temp_event_index = i }
            }
        }
    }
    else_if = {
        limit = { check_variable = { array_filter_type = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events
        for_loop_effect = {
            start = 0
            end = global.repeatable_events^num
            value = i
            if = {
                limit = { check_variable = { event_id = global.repeatable_events^i } }
                set_temp_variable = { temp_event_index = i }
            }
        }
    }
    else_if = {
        limit = { check_variable = { array_filter_type = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events
        for_loop_effect = {
            start = 0
            end = global.fire_once_events^num
            value = i
            if = {
                limit = { check_variable = { event_id = global.fire_once_events^i } }
                set_temp_variable = { temp_event_index = i }
            }
        }
    }
}

# Adjust the current event ID to be valid for the selected filter
adjust_event_id_for_filter = {
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS } }
        # All events - ensure ID is within valid range
        clamp_variable = {
            var = settings_selected_event_id
            min = 1
            max = global.total_events
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - check if current ID is major, if not set to first major
        set_temp_variable = { event_id = settings_selected_event_id }
        set_temp_variable = { array_filter_type = @FILTER_MAJOR_EVENTS }
        find_event_in_array = yes

        if = {
            limit = { check_variable = { temp_event_index = -1 } }
            if = {
                limit = { check_variable = { global.major_events^num > 0 } }
                set_variable = { settings_selected_event_id = global.major_events^0 }
            }
            else = {
                set_variable = { settings_selected_event_id = global.major_events^0 }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events
        set_temp_variable = { event_id = settings_selected_event_id }
        set_temp_variable = { array_filter_type = @FILTER_REPEATABLE_EVENTS }
        find_event_in_array = yes

        if = {
            limit = { check_variable = { temp_event_index = -1 } }
            if = {
                limit = { check_variable = { global.repeatable_events^num > 0 } }
                set_variable = { settings_selected_event_id = global.repeatable_events^0 }
            }
            else = {
                set_variable = { settings_selected_event_id = global.repeatable_events^0 }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events
        set_temp_variable = { event_id = settings_selected_event_id }
        set_temp_variable = { array_filter_type = @FILTER_FIRE_ONCE_EVENTS }
        find_event_in_array = yes

        if = {
            limit = { check_variable = { temp_event_index = -1 } }
            if = {
                limit = { check_variable = { global.fire_once_events^num > 0 } }
                set_variable = { settings_selected_event_id = global.fire_once_events^0 }
            }
            else = {
                set_variable = { settings_selected_event_id = global.fire_once_events^0 }
            }
        }
    }
}

# Get the next valid event ID for the current filter
get_next_valid_event_id = {
    # Simple implementation: set to next array element or wrap to first
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - cycle through major events array
        if = {
            limit = { check_variable = { global.major_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in major events array
            for_loop_effect = {
                start = 0
                end = global.major_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.major_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to next or wrap to first
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.major_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = 1 }
                if = {
                    limit = { check_variable = { current_index < global.major_events^num } }
                    set_variable = { settings_selected_event_id = global.major_events^current_index }
                }
                else = {
                    # Wrap to first
                    set_variable = { settings_selected_event_id = global.major_events^0 }
                }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events - cycle through repeatable events array
        if = {
            limit = { check_variable = { global.repeatable_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in repeatable events array
            for_loop_effect = {
                start = 0
                end = global.repeatable_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.repeatable_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to next or wrap to first
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.repeatable_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = 1 }
                if = {
                    limit = { check_variable = { current_index < global.repeatable_events^num } }
                    set_variable = { settings_selected_event_id = global.repeatable_events^current_index }
                }
                else = {
                    # Wrap to first
                    set_variable = { settings_selected_event_id = global.repeatable_events^0 }
                }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events - cycle through fire-once events array
        if = {
            limit = { check_variable = { global.fire_once_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in fire-once events array
            for_loop_effect = {
                start = 0
                end = global.fire_once_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.fire_once_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to next or wrap to first
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.fire_once_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = 1 }
                if = {
                    limit = { check_variable = { current_index < global.fire_once_events^num } }
                    set_variable = { settings_selected_event_id = global.fire_once_events^current_index }
                }
                else = {
                    # Wrap to first
                    set_variable = { settings_selected_event_id = global.fire_once_events^0 }
                }
            }
        }
    }
}

# Get the previous valid event ID for the current filter
get_previous_valid_event_id = {
    # Simple implementation: set to previous array element or wrap to last
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - cycle through major events array backwards
        if = {
            limit = { check_variable = { global.major_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in major events array
            for_loop_effect = {
                start = 0
                end = global.major_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.major_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to previous or wrap to last
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.major_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.major_events^last_index }
            }
            else_if = {
                limit = { check_variable = { current_index = 0 } }
                # At first, wrap to last
                set_temp_variable = { last_index = global.major_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.major_events^last_index }
            }
            else = {
                # Move to previous
                subtract_from_temp_variable = { current_index = 1 }
                set_variable = { settings_selected_event_id = global.major_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events - cycle through repeatable events array backwards
        if = {
            limit = { check_variable = { global.repeatable_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in repeatable events array
            for_loop_effect = {
                start = 0
                end = global.repeatable_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.repeatable_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to previous or wrap to last
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.repeatable_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.repeatable_events^last_index }
            }
            else_if = {
                limit = { check_variable = { current_index = 0 } }
                # At first, wrap to last
                set_temp_variable = { last_index = global.repeatable_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.repeatable_events^last_index }
            }
            else = {
                # Move to previous
                subtract_from_temp_variable = { current_index = 1 }
                set_variable = { settings_selected_event_id = global.repeatable_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events - cycle through fire-once events array backwards
        if = {
            limit = { check_variable = { global.fire_once_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in fire-once events array
            for_loop_effect = {
                start = 0
                end = global.fire_once_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.fire_once_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move to previous or wrap to last
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.fire_once_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.fire_once_events^last_index }
            }
            else_if = {
                limit = { check_variable = { current_index = 0 } }
                # At first, wrap to last
                set_temp_variable = { last_index = global.fire_once_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.fire_once_events^last_index }
            }
            else = {
                # Move to previous
                subtract_from_temp_variable = { current_index = 1 }
                set_variable = { settings_selected_event_id = global.fire_once_events^current_index }
            }
        }
    }
}

# Decrease event ID
decrease_event_id = {
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS } }
        # All events - standard decrement with wrapping
        set_temp_variable = { new_id = settings_selected_event_id }
        subtract_from_temp_variable = { new_id = settings_events_increment_mode }

        if = {
            limit = { check_variable = { new_id < 1 } }
            set_variable = { settings_selected_event_id = global.total_events }
        }
        else = {
            set_variable = { settings_selected_event_id = new_id }
        }
    }
    else = {
        get_previous_valid_event_id_by_steps = yes
    }

    update_event_id_display = yes
}

# Increase event ID
increase_event_id = {
    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS } }
        # All events - standard increment with wrapping
        set_temp_variable = { new_id = settings_selected_event_id }
        add_to_temp_variable = { new_id = settings_events_increment_mode }

        if = {
            limit = { check_variable = { new_id > global.total_events } }
            set_variable = { settings_selected_event_id = 1 }
        }
        else = {
            set_variable = { settings_selected_event_id = new_id }
        }
    }
    else = {
        get_next_valid_event_id_by_steps = yes
    }

    update_event_id_display = yes
}

# Set increment mode to specific values (for modifier clicks)
set_increment_mode_to_1 = {
    set_variable = { settings_events_increment_mode = 1 }
}

set_increment_mode_to_5 = {
    set_variable = { settings_events_increment_mode = 5 }
}

set_increment_mode_to_10 = {
    set_variable = { settings_events_increment_mode = 10 }
}

# Toggle increment mode (1 -> 5 -> 10 -> 1)
toggle_increment_mode = {
    if = {
        limit = { check_variable = { settings_events_increment_mode = 1 } }
        # Switch from 1 to 5
        set_variable = { settings_events_increment_mode = 5 }
    }
    else_if = {
        limit = { check_variable = { settings_events_increment_mode = 10 } }
        # Switch from 10 to 1
        set_variable = { settings_events_increment_mode = 1 }
    }
    else = {
        # Switch from 5 to 10 (default case)
        set_variable = { settings_events_increment_mode = 10 }
    }
}

# Update event ID display flags
update_event_id_display = {
    if = {
        limit = { check_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN } }
        set_country_flag = settings_event_id_zero
        set_variable = { settings_event_id = @EVENT_TYPE_UNKNOWN }
        set_variable = { settings_event_type = @EVENT_TYPE_UNKNOWN }
    }
    else = {
        clr_country_flag = settings_event_id_zero
        set_temp_variable = { event_id = settings_selected_event_id }
        get_event_type = yes

        set_variable = { settings_event_id = settings_selected_event_id }
        set_variable = { settings_event_type = event_type }
    }

    update_unfired_events_counts = yes
}

# Trigger selected event (checks if event can be fired unless force mode is enabled)
trigger_selected_event = {
    if = {
        limit = { NOT = { check_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN } } }

        set_temp_variable = { event_id = settings_selected_event_id }

        if = {
            limit = {
                OR = {
                    has_country_flag = force_trigger_mode_enabled
                    has_variable = temp_bypass_checks
                }
            }
            fire_event_by_id = yes
            log = "CHAOS REDUX SETTINGS: FORCE triggered event ID [?settings_selected_event_id]"
        }
        else = {
            get_event_type = yes
            set_variable = { settings_event_type = event_type }

            set_temp_variable = { can_fire = 1 }
            if = {
                limit = {
                    OR = {
                        check_variable = { settings_event_type = @EVENT_TYPE_MAJOR }
                        check_variable = { settings_event_type = @EVENT_TYPE_FIRE_ONCE }
                    }
                }
                if = {
                    limit = { is_in_array = { global.fired_events = event_id } }
                    set_temp_variable = { can_fire = 0 }
                }
            }

            if = {
                limit = { check_variable = { can_fire = 1 } }
                fire_event_by_id = yes
            }
            else = {
                log = "CHAOS REDUX SETTINGS: Cannot fire event [?event_id] - already fired. Enable force trigger mode to bypass this restriction."
            }
        }
    }
}

# Force trigger selected event (ignores fired status)
force_trigger_selected_event = {
    if = {
        limit = { NOT = { check_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN } } }

        set_variable = { temp_bypass_checks = 1 }
        fire_event_by_id = yes
        clear_variable = temp_bypass_checks
        log = "CHAOS REDUX SETTINGS: FORCE triggered event ID [?settings_selected_event_id]"
    }
}

# Trigger random event
trigger_random_event = {
    # Determine which events to include based on force mode and right-click status
    set_temp_variable = { include_fired_events = 0 }
    if = {
        limit = {
            OR = {
                has_variable = temp_force_mode  # Right-click triggered
                has_country_flag = force_trigger_mode_enabled  # Force mode checkbox enabled
            }
        }
        set_temp_variable = { include_fired_events = 1 }
    }

    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS } }
        # All events - need to respect fired status for major/fire-once events when not in force mode
        if = {
            limit = { check_variable = { include_fired_events = 0 } }
            # Normal mode - create temporary array of available events (unfired major/fire-once + all repeatable)
            clear_array = temp_available_events

            # Add unfired major events
            for_loop_effect = {
                start = 0
                end = global.major_events^num
                value = i
                set_temp_variable = { event_id = global.major_events^i }
                if = {
                    limit = { NOT = { is_in_array = { global.fired_events = event_id } } }
                    add_to_array = { temp_available_events = event_id }
                }
            }

            # Add unfired fire-once events
            for_loop_effect = {
                start = 0
                end = global.fire_once_events^num
                value = i
                set_temp_variable = { event_id = global.fire_once_events^i }
                if = {
                    limit = { NOT = { is_in_array = { global.fired_events = event_id } } }
                    add_to_array = { temp_available_events = event_id }
                }
            }

            # Add all repeatable events (always available)
            for_loop_effect = {
                start = 0
                end = global.repeatable_events^num
                value = i
                set_temp_variable = { event_id = global.repeatable_events^i }
                add_to_array = { temp_available_events = event_id }
            }

            # Select from available events
            if = {
                limit = { check_variable = { temp_available_events^num > 0 } }
                set_temp_variable = { array_size = temp_available_events^num }
                subtract_from_temp_variable = { array_size = 1 }
                set_variable_to_random = {
                    var = temp_random_index
                    min = 0
                    max = array_size
                    integer = yes
                }
                set_variable = { settings_selected_event_id = temp_available_events^temp_random_index }
            }
            else = {
                set_variable_to_random = {
                    var = temp_random_event_id
                    min = 1
                    max = global.total_events
                    integer = yes
                }
                set_variable = { settings_selected_event_id = temp_random_event_id }
            }
        }
        else = {
            set_variable_to_random = {
                var = temp_random_event_id
                min = 1
                max = global.total_events
                integer = yes
            }
            set_variable = { settings_selected_event_id = temp_random_event_id }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - random from major events array
        if = {
            limit = { check_variable = { global.major_events^num > 0 } }

            # If not including fired events, we need to filter out fired major events
            if = {
                limit = { check_variable = { include_fired_events = 0 } }
                # Create temporary array of unfired major events
                clear_array = temp_available_events
                for_loop_effect = {
                    start = 0
                    end = global.major_events^num
                    value = i
                    set_temp_variable = { event_id = global.major_events^i }
                    if = {
                        limit = { NOT = { is_in_array = { global.fired_events = event_id } } }
                        add_to_array = { temp_available_events = event_id }
                    }
                }

                # Select from unfired events if any available
                if = {
                    limit = { check_variable = { temp_available_events^num > 0 } }
                    set_temp_variable = { array_size = temp_available_events^num }
                    subtract_from_temp_variable = { array_size = 1 }
                    set_variable_to_random = {
                        var = temp_random_index
                        min = 0
                        max = array_size
                        integer = yes
                    }
                    set_variable = { settings_selected_event_id = temp_available_events^temp_random_index }
                }
                else = {
                    # No unfired major events available, select from all major events
                    set_temp_variable = { array_size = global.major_events^num }
                    subtract_from_temp_variable = { array_size = 1 }
                    set_variable_to_random = {
                        var = temp_random_index
                        min = 0
                        max = array_size
                        integer = yes
                    }
                    set_variable = { settings_selected_event_id = global.major_events^temp_random_index }
                }
            }
            else = {
                # Include fired events - select from all major events
                set_temp_variable = { array_size = global.major_events^num }
                subtract_from_temp_variable = { array_size = 1 }
                set_variable_to_random = {
                    var = temp_random_index
                    min = 0
                    max = array_size
                    integer = yes
                }
                set_variable = { settings_selected_event_id = global.major_events^temp_random_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events - always available, no fired status filtering needed
        if = {
            limit = { check_variable = { global.repeatable_events^num > 0 } }
            set_temp_variable = { array_size = global.repeatable_events^num }
            subtract_from_temp_variable = { array_size = 1 }
            set_variable_to_random = {
                var = temp_random_index
                min = 0
                max = array_size
                integer = yes
            }
            set_variable = { settings_selected_event_id = global.repeatable_events^temp_random_index }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events - filter based on fired status unless force mode
        if = {
            limit = { check_variable = { global.fire_once_events^num > 0 } }

            # If not including fired events, filter out fired fire-once events
            if = {
                limit = { check_variable = { include_fired_events = 0 } }
                # Create temporary array of unfired fire-once events
                clear_array = temp_available_events
                for_loop_effect = {
                    start = 0
                    end = global.fire_once_events^num
                    value = i
                    set_temp_variable = { event_id = global.fire_once_events^i }
                    if = {
                        limit = { NOT = { is_in_array = { global.fired_events = event_id } } }
                        add_to_array = { temp_available_events = event_id }
                    }
                }

                # Select from unfired events if any available
                if = {
                    limit = { check_variable = { temp_available_events^num > 0 } }
                    set_temp_variable = { array_size = temp_available_events^num }
                    subtract_from_temp_variable = { array_size = 1 }
                    set_variable_to_random = {
                        var = temp_random_index
                        min = 0
                        max = array_size
                        integer = yes
                    }
                    set_variable = { settings_selected_event_id = temp_available_events^temp_random_index }
                }
                else = {
                    # No unfired fire-once events available, select from all fire-once events
                    set_temp_variable = { array_size = global.fire_once_events^num }
                    subtract_from_temp_variable = { array_size = 1 }
                    set_variable_to_random = {
                        var = temp_random_index
                        min = 0
                        max = array_size
                        integer = yes
                    }
                    set_variable = { settings_selected_event_id = global.fire_once_events^temp_random_index }
                }
            }
            else = {
                # Include fired events - select from all fire-once events
                set_temp_variable = { array_size = global.fire_once_events^num }
                subtract_from_temp_variable = { array_size = 1 }
                set_variable_to_random = {
                    var = temp_random_index
                    min = 0
                    max = array_size
                    integer = yes
                }
                set_variable = { settings_selected_event_id = global.fire_once_events^temp_random_index }
            }
        }
    }

    update_event_id_display = yes

    # Check if in force mode (right-click or force trigger enabled)
    if = {
        limit = {
            OR = {
                has_variable = temp_force_mode  # Right-click triggered
                has_country_flag = force_trigger_mode_enabled  # Force mode checkbox enabled
            }
        }
        set_temp_variable = { event_id = settings_selected_event_id }
        fire_selected_event = yes
        log = "CHAOS REDUX SETTINGS: FORCE triggered random event ID [?settings_selected_event_id]"
    }
    else = {
        fire_event_by_id = yes
    }
}

# Fire event by ID
fire_event_by_id = {
    # Input: settings_selected_event_id
    set_temp_variable = { event_id = settings_selected_event_id }

    # Get event type to determine how to handle it
    get_event_type = yes

    # Update tracking and weights based on event type
    if = {
        limit = { check_variable = { event_type = 1 } }
        # Major event
        on_major_event_fired = yes
    }
    else_if = {
        limit = { check_variable = { event_type = 2 } }
        # Minor repeatable event
        on_repeatable_event_fired = yes
    }
    else_if = {
        limit = { check_variable = { event_type = 3 } }
        # Minor fire-once event
        on_fire_once_event_fired = yes
    }

    # Fire the actual event based on ID
    fire_selected_event = yes

    # Update last fired event tracking
    set_variable = { global.last_fired_event_id = settings_selected_event_id }
    update_last_fired_event_display = yes

    log = "CHAOS REDUX SETTINGS: Manually triggered event ID [?settings_selected_event_id]"
}

# Fire selected event
fire_selected_event = {
    meta_effect = {
        text = {
            country_event = {
                id = chaosx.nr[EVENT_ID].1
            }
        }
        EVENT_ID = "[?settings_selected_event_id]"
    }
}

# Update last fired event display
update_last_fired_event_display = {
    if = {
        limit = {
            has_variable = global.last_fired_event_id
            NOT = { check_variable = { var = global.last_fired_event_id value = 0 compare = less_than } }
        }
        clr_global_flag = no_events_fired_yet
    }
    else = {
        set_global_flag = no_events_fired_yet
    }
}

switch_trigger_events_headers = {
    if = {
        limit = { has_country_flag = show_events_view }
        # Already in events view, switch to clusters
        clr_country_flag = show_events_view
        set_country_flag = show_event_clusters_view
    }
    else = {
        # Switch to events view
        clr_country_flag = show_event_clusters_view
        set_country_flag = show_events_view
    }
}

# Toggle event system for current country
toggle_event_system = {
    if = {
        limit = { has_country_flag = events_activated }
        clr_country_flag = events_activated
        log = "CHAOS REDUX SETTINGS: Event system has been DISABLED for [This.GetName]"
    }
    else = {
        set_country_flag = events_activated
        log = "CHAOS REDUX SETTINGS: Event system has been ENABLED for [This.GetName]"
    }
    update_enabled_countries_list = yes
}

# Toggle force trigger mode for current country
toggle_force_trigger_mode = {
    if = {
        limit = { has_country_flag = force_trigger_mode_enabled }
        clr_country_flag = force_trigger_mode_enabled
        log = "CHAOS REDUX SETTINGS: Force trigger mode has been DISABLED for [This.GetName]"
    }
    else = {
        set_country_flag = force_trigger_mode_enabled
        log = "CHAOS REDUX SETTINGS: Force trigger mode has been ENABLED for [This.GetName]"
    }
}

# Toggle event disabled state for selected event
toggle_event_disabled = {
    if = {
        limit = { NOT = { check_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN } } }
        if = {
            limit = { is_in_array = { global.disabled_events = settings_selected_event_id } }
            remove_from_array = { global.disabled_events = settings_selected_event_id }
        }
        else = {
            add_to_array = { global.disabled_events = settings_selected_event_id }
        }
    }
}

# Toggle events log display
toggle_events_log = {
    if = {
        limit = { has_country_flag = show_events_log }
        clr_country_flag = show_events_log
    }
    else = {
        set_country_flag = show_events_log
    }
}

# Toggle between events view and event clusters view
toggle_events_view = {
    if = {
        limit = { has_country_flag = show_events_view }
        # Switch to event clusters
        clr_country_flag = show_events_view
        set_country_flag = show_event_clusters_view
    }
    else = {
        # Switch to events
        set_country_flag = show_events_view
        clr_country_flag = show_event_clusters_view
    }
}

# ============================================================================
# STEP-BASED EVENT ID CYCLING FOR FILTERED MODES
# ============================================================================

# Get the next valid event ID by stepping through N positions in the filtered array
get_next_valid_event_id_by_steps = {
    set_temp_variable = { steps_to_move = settings_events_increment_mode }

    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - move by N steps in major events array
        if = {
            limit = { check_variable = { global.major_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in major events array
            for_loop_effect = {
                start = 0
                end = global.major_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.major_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move forward by steps_to_move or wrap around

            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.major_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = steps_to_move }
                # Handle wrapping
                if = {
                    limit = { OR = { check_variable = { current_index = global.major_events^num } check_variable = { current_index > global.major_events^num } } }
                    set_temp_variable = { wrap_amount = current_index }
                    subtract_from_temp_variable = { wrap_amount = global.major_events^num }
                    set_temp_variable = { current_index = wrap_amount }
                }
                set_variable = { settings_selected_event_id = global.major_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events - move by N steps in repeatable events array
        if = {
            limit = { check_variable = { global.repeatable_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in repeatable events array
            for_loop_effect = {
                start = 0
                end = global.repeatable_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.repeatable_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move forward by steps_to_move or wrap around
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.repeatable_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = steps_to_move }
                # Handle wrapping
                if = {
                    limit = { OR = { check_variable = { current_index > global.repeatable_events^num } check_variable = { current_index = global.repeatable_events^num } } }
                    set_temp_variable = { wrap_amount = current_index }
                    subtract_from_temp_variable = { wrap_amount = global.repeatable_events^num }
                    set_temp_variable = { current_index = wrap_amount }
                }
                set_variable = { settings_selected_event_id = global.repeatable_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events - move by N steps in fire-once events array
        if = {
            limit = { check_variable = { global.fire_once_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in fire-once events array
            for_loop_effect = {
                start = 0
                end = global.fire_once_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.fire_once_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move forward by steps_to_move or wrap around
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to first
                set_variable = { settings_selected_event_id = global.fire_once_events^0 }
            }
            else = {
                add_to_temp_variable = { current_index = steps_to_move }
                # Handle wrapping
                if = {
                    limit = { OR = { check_variable = { current_index > global.fire_once_events^num } check_variable = { current_index = global.fire_once_events^num } } }
                    set_temp_variable = { wrap_amount = current_index }
                    subtract_from_temp_variable = { wrap_amount = global.fire_once_events^num }
                    set_temp_variable = { current_index = wrap_amount }
                }
                set_variable = { settings_selected_event_id = global.fire_once_events^current_index }
            }
        }
    }
}

# Get the previous valid event ID by stepping backward through N positions in the filtered array
get_previous_valid_event_id_by_steps = {
    set_temp_variable = { steps_to_move = settings_events_increment_mode }

    if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_MAJOR_EVENTS } }
        # Major events - move backward by N steps in major events array
        if = {
            limit = { check_variable = { global.major_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in major events array
            for_loop_effect = {
                start = 0
                end = global.major_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.major_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move backward by steps_to_move or wrap around
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.major_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.major_events^last_index }
            }
            else = {
                # Move backward with wrapping
                subtract_from_temp_variable = { current_index = steps_to_move }
                if = {
                    limit = { check_variable = { current_index < 0 } }
                    # Wrap around to end
                    add_to_temp_variable = { current_index = global.major_events^num }
                }
                set_variable = { settings_selected_event_id = global.major_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_REPEATABLE_EVENTS } }
        # Repeatable events - move backward by N steps in repeatable events array
        if = {
            limit = { check_variable = { global.repeatable_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in repeatable events array
            for_loop_effect = {
                start = 0
                end = global.repeatable_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.repeatable_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move backward by steps_to_move or wrap around
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.repeatable_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.repeatable_events^last_index }
            }
            else = {
                # Move backward with wrapping
                subtract_from_temp_variable = { current_index = steps_to_move }
                if = {
                    limit = { check_variable = { current_index < 0 } }
                    # Wrap around to end
                    add_to_temp_variable = { current_index = global.repeatable_events^num }
                }
                set_variable = { settings_selected_event_id = global.repeatable_events^current_index }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_event_id_filter = @FILTER_FIRE_ONCE_EVENTS } }
        # Fire-once events - move backward by N steps in fire-once events array
        if = {
            limit = { check_variable = { global.fire_once_events^num > 0 } }

            set_temp_variable = { current_index = -1 }
            # Find current index in fire-once events array
            for_loop_effect = {
                start = 0
                end = global.fire_once_events^num
                value = i
                if = {
                    limit = { check_variable = { settings_selected_event_id = global.fire_once_events^i } }
                    set_temp_variable = { current_index = i }
                }
            }

            # Move backward by steps_to_move or wrap around
            if = {
                limit = { check_variable = { current_index = -1 } }
                # Not found, go to last
                set_temp_variable = { last_index = global.fire_once_events^num }
                subtract_from_temp_variable = { last_index = 1 }
                set_variable = { settings_selected_event_id = global.fire_once_events^last_index }
            }
            else = {
                # Move backward with wrapping
                subtract_from_temp_variable = { current_index = steps_to_move }
                if = {
                    limit = { check_variable = { current_index < 0 } }
                    # Wrap around to end
                    add_to_temp_variable = { current_index = global.fire_once_events^num }
                }
                set_variable = { settings_selected_event_id = global.fire_once_events^current_index }
            }
        }
    }
}


# ============================================================================
# RANDOM EVENT BUTTON AVAILABILITY SYSTEM
# ============================================================================

# Update counts of unfired events for GUI triggers
update_unfired_events_counts = {
    # Count unfired major events
    set_variable = { global.unfired_major_events_count = 0 }
    for_loop_effect = {
        start = 0
        end = global.major_events^num
        value = i
        set_temp_variable = { check_event_id = global.major_events^i }
        if = {
            limit = { NOT = { is_in_array = { global.fired_events = check_event_id } } }
            add_to_variable = { global.unfired_major_events_count = 1 }
        }
    }

    # Count unfired fire-once events
    set_variable = { global.unfired_fire_once_events_count = 0 }
    for_loop_effect = {
        start = 0
        end = global.fire_once_events^num
        value = i
        set_temp_variable = { check_event_id = global.fire_once_events^i }
        if = {
            limit = { NOT = { is_in_array = { global.fired_events = check_event_id } } }
            add_to_variable = { global.unfired_fire_once_events_count = 1 }
        }
    }
}

# ============================================================================
# RESET DEFAULTS
# ============================================================================

reset_trigger_events = {
    # Reset trigger events to defaults (cosmetic)
    set_variable = { settings_selected_event_id = @EVENT_TYPE_UNKNOWN }
    set_variable = { settings_event_id_filter = @FILTER_ALL_EVENTS }
    set_variable = { settings_events_increment_mode = @DEFAULT_INCREMENT_MODE }

    # Reset view to Events view
    set_country_flag = show_events_view
    clr_country_flag = show_event_clusters_view

    # Reset force trigger mode (default: disabled)
    clr_country_flag = force_trigger_mode_enabled

    # Re-enable systems if they were disabled
    set_country_flag = events_activated

    # Update event display to show "No event selected"
    update_event_id_display = yes
}


###############################################################################################################

#  #######                            #####
#     #    # #    # ###### #####     #     # #   #  ####  ##### ###### #    #
#     #    # ##  ## #      #    #    #        # #  #        #   #      ##  ##
#     #    # # ## # #####  #    #     #####    #    ####    #   #####  # ## #
#     #    # #    # #      #####           #   #        #   #   #      #    #
#     #    # #    # #      #   #     #     #   #   #    #   #   #      #    #
#     #    # #    # ###### #    #     #####    #    ####    #   ###### #    #

###############################################################################################################


# Initialize timer system settings
initialize_timer_system_settings = {
    set_variable = { settings_timer_min_days = @DEFAULT_MIN_DAYS }
    set_variable = { settings_timer_max_days = @DEFAULT_MAX_DAYS }
    set_variable = { settings_timer_min_decrement_cap = @DEFAULT_MIN_DECREMENT_CAP }
    set_variable = { settings_timer_max_decrement_cap = @DEFAULT_MAX_DECREMENT_CAP }
    set_variable = { settings_timer_increment_mode = 1 }

    # Set default view to Timer Interval
    set_country_flag = show_timer_interval_view
    clr_country_flag = show_tag_management_view
}

# Update timer value from current settings using dynamic cap calculation
update_timer_from_settings = {
    # Update timer system variables from settings
    set_variable = { timer_min_days = settings_timer_min_days }
    set_variable = { timer_max_days = settings_timer_max_days }

    calculate_dynamic_caps = yes

    set_variable = { timer_min_decrement_cap = settings_timer_min_decrement_cap }
    set_variable = { timer_max_decrement_cap = settings_timer_max_decrement_cap }

    calculate_next_timer_value = yes
    log = "CHAOS REDUX TIMER: Timer updated - new value: [?event_timer_days] min:[?settings_timer_min_days] max:[?settings_timer_max_days] min_cap:[?settings_timer_min_decrement_cap] max_cap:[?settings_timer_max_decrement_cap]"
}

# Decrease minimum timer value
decrease_timer_min = {
    set_temp_variable = { new_min = settings_timer_min_days }
    subtract_from_temp_variable = { new_min = settings_timer_increment_mode }

    clamp_temp_variable = {
        var = new_min
        min = @TIMER_MIN_MIN_VALUE
        max = settings_timer_max_days
    }

    set_variable = { settings_timer_min_days = new_min }
    calculate_dynamic_caps = yes
}

# Increase minimum timer value
increase_timer_min = {
    set_temp_variable = { new_min = settings_timer_min_days }
    add_to_temp_variable = { new_min = settings_timer_increment_mode }

    clamp_temp_variable = {
        var = new_min
        min = @TIMER_MIN_MIN_VALUE
        max = settings_timer_max_days
    }

    set_variable = { settings_timer_min_days = new_min }
    calculate_dynamic_caps = yes
}

# Decrease maximum timer value
decrease_timer_max = {
    set_temp_variable = { new_max = settings_timer_max_days }
    subtract_from_temp_variable = { new_max = settings_timer_increment_mode }

    clamp_temp_variable = {
        var = new_max
        min = settings_timer_min_days
        max = @TIMER_MAX_MAX_VALUE
    }

    set_variable = { settings_timer_max_days = new_max }
    calculate_dynamic_caps = yes
}

# Increase maximum timer value
increase_timer_max = {
    set_temp_variable = { new_max = settings_timer_max_days }
    add_to_temp_variable = { new_max = settings_timer_increment_mode }

    clamp_temp_variable = {
        var = new_max
        min = settings_timer_min_days
        max = @TIMER_MAX_MAX_VALUE
    }

    set_variable = { settings_timer_max_days = new_max }
    calculate_dynamic_caps = yes
}

# Toggle timer system increment mode
toggle_timer_increment_mode = {
    if = {
        limit = { check_variable = { settings_timer_increment_mode = 1 } }
        # Switch from 1 to 5
        set_variable = { settings_timer_increment_mode = 5 }
    }
    else_if = {
        limit = { check_variable = { settings_timer_increment_mode = 10 } }
        # Switch from 10 to 1
        set_variable = { settings_timer_increment_mode = 1 }
    }
    else = {
        # Switch from 5 to 10 (default case)
        set_variable = { settings_timer_increment_mode = 10 }
    }
}

# Toggle timer window visibility
toggle_timer_window = {
    if = {
        limit = { has_country_flag = timer_window_enabled }
        clr_country_flag = timer_window_enabled
        log = "CHAOS REDUX SETTINGS: Timer window has been HIDDEN for [This.GetName]"
    }
    else = {
        set_country_flag = timer_window_enabled
        log = "CHAOS REDUX SETTINGS: Timer window has been SHOWN for [This.GetName]"
    }
}

# Reset timer to default values
reset_timer_to_defaults = {
    # Restore timer system
    set_variable = { timer_min_days = @DEFAULT_MIN_DAYS }
    set_variable = { timer_max_days = @DEFAULT_MAX_DAYS }
    set_variable = { timer_min_decrement_cap = @DEFAULT_MIN_DECREMENT_CAP }
    set_variable = { timer_max_decrement_cap = @DEFAULT_MAX_DECREMENT_CAP }
    set_variable = { timer_day_decrement = 0 }
    set_variable = { timer_max_cap_reduction = 0 }

    # Reset timer settings to defaults
    set_variable = { settings_timer_min_days = @DEFAULT_MIN_DAYS }
    set_variable = { settings_timer_max_days = @DEFAULT_MAX_DAYS }
    set_variable = { settings_timer_min_decrement_cap = @DEFAULT_MIN_DECREMENT_CAP }
    set_variable = { settings_timer_max_decrement_cap = @DEFAULT_MAX_DECREMENT_CAP }

    # Reset timer increment mode to 1
    set_variable = { settings_timer_increment_mode = 1 }

    # Hide timer window
    clr_country_flag = timer_window_enabled

    set_country_flag = events_activated
}

# ============================================================================
# DYNAMIC CAP CALCULATION SYSTEM
# ============================================================================

# Calculate dynamic caps based on minValue and maxValue inputs
calculate_dynamic_caps = {
    # Input variables: settings_timer_min_days, settings_timer_max_days
    # Output variables: settings_timer_min_decrement_cap, settings_timer_max_decrement_cap

    set_temp_variable = { min_value = settings_timer_min_days }
    set_temp_variable = { max_value = settings_timer_max_days }

    # Calculate minDecrementCap = minValue - 10 (floor at 0)
    set_temp_variable = { calculated_min_cap = min_value }
    subtract_from_temp_variable = { calculated_min_cap = 10 }

    clamp_temp_variable = {
        var = calculated_min_cap
        min = 0
    }

    # Calculate maxDecrementCap based on maxValue
    if = {
        limit = { check_variable = { max_value < @DYNAMIC_CAP_FLOOR_THRESHOLD } }
        set_temp_variable = { calculated_max_cap = 0 }
    }
    else = {
        # Calculate deviation from base value (35)
        set_temp_variable = { deviation = max_value }
        subtract_from_temp_variable = { deviation = @DEFAULT_MAX_DAYS }

        # Calculate steps: deviation // 3
        set_temp_variable = { steps = 0 }
        set_temp_variable = { abs_deviation = deviation }

        if = {
            limit = { check_variable = { deviation < 0 } }
            multiply_temp_variable = { abs_deviation = -1 }
        }

        # Integer division by 3 using repeated subtraction
        while_loop_effect = {
            limit = { check_variable = { abs_deviation > 2 } }
            add_to_temp_variable = { steps = 1 }
            subtract_from_temp_variable = { abs_deviation = @DYNAMIC_CAP_STEP_SIZE }
        }

        # Apply the formula: base 5 + (or -) steps
        set_temp_variable = { calculated_max_cap = @DYNAMIC_CAP_BASE_FACTOR }

        if = {
            limit = { check_variable = { deviation < 0 } }
            subtract_from_temp_variable = { calculated_max_cap = steps }
        }
        else = {
            add_to_temp_variable = { calculated_max_cap = steps }
        }

        clamp_temp_variable = {
            var = calculated_max_cap
            min = 0
        }
    }

    # Apply gap-based clamping
    set_temp_variable = { gap = max_value }
    subtract_from_temp_variable = { gap = min_value }

    clamp_temp_variable = {
        var = calculated_max_cap
        max = gap
    }

    # Apply final constraint (minDecrementCap + maxDecrementCap ≤ maxValue)
    set_temp_variable = { total_caps = calculated_min_cap }
    add_to_temp_variable = { total_caps = calculated_max_cap }

    if = {
        limit = { check_variable = { total_caps > max_value } }
        set_temp_variable = { allowed_max_cap = max_value }
        subtract_from_temp_variable = { allowed_max_cap = calculated_min_cap }

        clamp_temp_variable = {
            var = allowed_max_cap
            min = 0
        }

        if = {
            limit = { check_variable = { allowed_max_cap = 0 } }
            set_temp_variable = { calculated_min_cap = max_value }
        }

        set_temp_variable = { calculated_max_cap = allowed_max_cap }
    }

    # Set final calculated values
    set_variable = { settings_timer_min_decrement_cap = calculated_min_cap }
    set_variable = { settings_timer_max_decrement_cap = calculated_max_cap }
}

###############################################################################################################

#  #######
#     #      ##    ####     #    #   ##   #    #   ##    ####  ###### #    # ###### #    # #####
#     #     #  #  #    #    ##  ##  #  #  ##   #  #  #  #    # #      ##  ## #      ##   #    #
#     #    #    # #         # ## # #    # # #  # #    # #      #####  # ## # #####  # #  #    #
#     #    ###### #  ###    #    # ###### #  # # ###### #  ### #      #    # #      #  # #    #
#     #    #    # #    #    #    # #    # #   ## #    # #    # #      #    # #      #   ##    #
#     #    #    #  ####     #    # #    # #    # #    #  ####  ###### #    # ###### #    #    #

###############################################################################################################


# Initialize tag management settings
initialize_tag_management_settings = {
    set_variable = { settings_selected_tag_index = 0 }
    set_variable = { settings_tag_increment_mode = @DEFAULT_TAG_MANAGEMENT_MODE }
    set_variable = { settings_country_filter = @COUNTRY_FILTER_ALL }
    set_variable = { settings_continent_sort = @CONTINENT_SORT_ALPHABETICAL }
}

# Switch to Timer Interval view
switch_to_timer_interval = {
    set_country_flag = show_timer_interval_view
    clr_country_flag = show_tag_management_view
}

# Switch to Tag Management view
switch_to_tag_management = {
    clr_country_flag = show_timer_interval_view
    set_country_flag = show_tag_management_view
}

# Toggle between Timer Interval and Tag Management views
open_tag_management_menu = {
    clear_all_menu_flags = yes
    clr_country_flag = show_timer_system_menu # A bit of a mess, but ok, i had to move the tag management into a separate menu. Just making sure that it will work properly, maybe these clearings are not needed.
    clr_country_flag = show_timer_interval_view
    set_country_flag = show_tag_management_view
}

# Get the current filtered country list based on filter and sort settings
get_current_filtered_country_list = {
    # First ensure continent arrays are populated
    update_filtered_countries_list = yes

    # Build the current filtered list based on continent sort setting
    resize_array = { temp_working_countries_list = 0 }

    if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_ALPHABETICAL } }
        for_loop_effect = {
            start = 0
            end = global.countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_EUROPE } }
        # Use Europe countries array
        for_loop_effect = {
            start = 0
            end = global.europe_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.europe_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_ASIA } }
        # Use Asia countries array
        for_loop_effect = {
            start = 0
            end = global.asia_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.asia_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_AFRICA } }
        # Use Africa countries array
        for_loop_effect = {
            start = 0
            end = global.africa_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.africa_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_NORTH_AMERICA } }
        # Use North America countries array
        for_loop_effect = {
            start = 0
            end = global.north_america_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.north_america_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_SOUTH_AMERICA } }
        # Use South America countries array
        for_loop_effect = {
            start = 0
            end = global.south_america_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.south_america_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_OCEANIA } }
        # Use Oceania countries array
        for_loop_effect = {
            start = 0
            end = global.oceania_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.oceania_countries^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_MIDDLE_EAST } }
        for_loop_effect = {
            start = 0
            end = global.middle_east_countries^num
            value = i
            add_to_array = { temp_working_countries_list = global.middle_east_countries^i }
        }
    }

    # Now apply country filter (All/Enabled Only/Disabled Only)
    resize_array = { temp_final_countries_list = 0 }

    if = {
        limit = { check_variable = { settings_country_filter = @COUNTRY_FILTER_ALL } }
        # All Countries - use the working list as-is
        for_loop_effect = {
            start = 0
            end = temp_working_countries_list^num
            value = i
            add_to_array = { temp_final_countries_list = temp_working_countries_list^i }
        }
    }
    else_if = {
        limit = { check_variable = { settings_country_filter = @COUNTRY_FILTER_ENABLED_ONLY } }
        # Enabled Only - filter for countries with events_activated flag
        for_loop_effect = {
            start = 0
            end = temp_working_countries_list^num
            value = i
            set_temp_variable = { check_country = temp_working_countries_list^i }
            var:check_country = {
                if = {
                    limit = { has_country_flag = events_activated }
                    ROOT = { add_to_array = { temp_final_countries_list = PREV } }
                }
            }
        }
    }
    else_if = {
        limit = { check_variable = { settings_country_filter = @COUNTRY_FILTER_DISABLED_ONLY } }
        # Disabled Only - filter for countries without events_activated flag
        for_loop_effect = {
            start = 0
            end = temp_working_countries_list^num
            value = i
            set_temp_variable = { check_country = temp_working_countries_list^i }
            var:check_country = {
                if = {
                    limit = { NOT = { has_country_flag = events_activated } }
                    ROOT = { add_to_array = { temp_final_countries_list = PREV } }
                }
            }
        }
    }

    # Set the final list size for navigation
    set_temp_variable = { temp_current_list_size = temp_final_countries_list^num }

    # log = "CHAOS REDUX TAG MANAGEMENT: Using country filter [?settings_country_filter] and continent sort [?settings_continent_sort] with [?temp_current_list_size] countries"
}

# Decrease selected tag index
decrease_tag_index = {
    # Get the active filtered list
    get_current_filtered_country_list = yes

    # Handle empty list case
    if = {
        limit = { check_variable = { temp_current_list_size = 0 } }
        set_variable = { settings_selected_tag_index = 0 }
        log = "CHAOS REDUX TAG MANAGEMENT: Cannot navigate - no countries in current filtered list"
    }
    else = {
        set_temp_variable = { new_index = settings_selected_tag_index }
        subtract_from_temp_variable = { new_index = settings_tag_increment_mode }

        if = {
            limit = { check_variable = { new_index < 0 } }
            # Wrap to last country in current filtered list
            set_temp_variable = { last_index = temp_current_list_size }
            subtract_from_temp_variable = { last_index = 1 }
            set_variable = { settings_selected_tag_index = last_index }
        }
        else = {
            set_variable = { settings_selected_tag_index = new_index }
        }
    }

    update_selected_tag_info = yes
}

# Increase selected tag index
increase_tag_index = {
    # Get the active filtered list
    get_current_filtered_country_list = yes

    # Handle empty list case
    if = {
        limit = { check_variable = { temp_current_list_size = 0 } }
        set_variable = { settings_selected_tag_index = 0 }
        log = "CHAOS REDUX TAG MANAGEMENT: Cannot navigate - no countries in current filtered list"
    }
    else = {
        set_temp_variable = { new_index = settings_selected_tag_index }
        add_to_temp_variable = { new_index = settings_tag_increment_mode }

        if = {
            limit = { OR = {
                check_variable = { new_index = temp_current_list_size }
                check_variable = { new_index > temp_current_list_size }
            } }
            # Wrap to first country in current filtered list
            set_variable = { settings_selected_tag_index = 0 }
        }
        else = {
            set_variable = { settings_selected_tag_index = new_index }
        }
    }

    update_selected_tag_info = yes
}

# Toggle tag management increment mode
toggle_tag_increment_mode = {
    if = {
        limit = { check_variable = { settings_tag_increment_mode = 1 } }
        # Switch from 1 to 5
        set_variable = { settings_tag_increment_mode = 5 }
    }
    else_if = {
        limit = { check_variable = { settings_tag_increment_mode = 10 } }
        # Switch from 10 to 1
        set_variable = { settings_tag_increment_mode = 1 }
    }
    else = {
        # Switch from 5 to 10 (default case)
        set_variable = { settings_tag_increment_mode = 10 }
    }
}

# Update selected tag information
update_selected_tag_info = {
    # Get the current filtered list first
    get_current_filtered_country_list = yes

    # Handle empty filtered list case
    if = {
        limit = { check_variable = { temp_current_list_size = 0 } }
        set_variable = { settings_selected_tag_index = 0 }
        clear_variable = settings_current_selected_country
        log = "CHAOS REDUX TAG MANAGEMENT: No countries match current filter/sort criteria"
    }
    else = {
        # Validate tag index bounds for current filtered list
        if = {
            limit = {
                OR = {
                    check_variable = { settings_selected_tag_index < 0 }
                    check_variable = { settings_selected_tag_index = temp_current_list_size }
                    check_variable = { settings_selected_tag_index > temp_current_list_size }
                }
            }
            set_variable = { settings_selected_tag_index = 0 }
        }

        # Store the currently selected country tag for easy access from the filtered list
        set_variable = { settings_current_selected_country = temp_final_countries_list^settings_selected_tag_index }

        # Log the current selection for debugging
        # if = {
        #     limit = { has_variable = settings_current_selected_country }
        #     var:settings_current_selected_country = {
        #         ROOT = {
        #             log = "CHAOS REDUX TAG MANAGEMENT: Selected tag [PREV.GetTag] ([PREV.GetName]) at index [?settings_selected_tag_index] from filtered list of [?temp_current_list_size] countries"
        #         }
        #     }
        # }
    }

    update_enabled_countries_list = yes
}

# ============================================================================
# COUNTRY FILTER AND SORTING SYSTEM
# ============================================================================

# Cycle to previous country filter
cycle_country_filter_prev = {
    if = {
        limit = { check_variable = { settings_country_filter = @COUNTRY_FILTER_ALL } }
        set_variable = { settings_country_filter = @COUNTRY_FILTER_DISABLED_ONLY }
    }
    else = {
        subtract_from_variable = { settings_country_filter = 1 }
    }

    # Reset selection to first country in new filtered list and update
    set_variable = { settings_selected_tag_index = 0 }
    update_selected_tag_info = yes
    log = "CHAOS REDUX TAG MANAGEMENT: Country filter changed to [?settings_country_filter]"
}

# Cycle to next country filter
cycle_country_filter_next = {
    if = {
        limit = { check_variable = { settings_country_filter = @COUNTRY_FILTER_DISABLED_ONLY } }
        set_variable = { settings_country_filter = @COUNTRY_FILTER_ALL }
    }
    else = {
        add_to_variable = { settings_country_filter = 1 }
    }

    # Reset selection to first country in new filtered list and update
    set_variable = { settings_selected_tag_index = 0 }
    update_selected_tag_info = yes
    log = "CHAOS REDUX TAG MANAGEMENT: Country filter changed to [?settings_country_filter]"
}

# Cycle to previous continent sort
cycle_continent_sort_prev = {
    if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_ALPHABETICAL } }
        set_variable = { settings_continent_sort = @CONTINENT_SORT_MIDDLE_EAST }
    }
    else = {
        subtract_from_variable = { settings_continent_sort = 1 }
    }

    # Reset selection to first country in new filtered list and update
    set_variable = { settings_selected_tag_index = 0 }
    update_selected_tag_info = yes
    log = "CHAOS REDUX TAG MANAGEMENT: Continent sort changed to [?settings_continent_sort]"
}

# Cycle to next continent sort
cycle_continent_sort_next = {
    if = {
        limit = { check_variable = { settings_continent_sort = @CONTINENT_SORT_MIDDLE_EAST } }
        set_variable = { settings_continent_sort = @CONTINENT_SORT_ALPHABETICAL }
    }
    else = {
        add_to_variable = { settings_continent_sort = 1 }
    }

    # Reset selection to first country in new filtered list and update
    set_variable = { settings_selected_tag_index = 0 }
    update_selected_tag_info = yes
    log = "CHAOS REDUX TAG MANAGEMENT: Continent sort changed to [?settings_continent_sort]"
}

# Create continent-based country arrays for navigation
update_filtered_countries_list = {
    resize_array = { global.europe_countries = 0 }
    resize_array = { global.asia_countries = 0 }
    resize_array = { global.africa_countries = 0 }
    resize_array = { global.north_america_countries = 0 }
    resize_array = { global.south_america_countries = 0 }
    resize_array = { global.oceania_countries = 0 }
    resize_array = { global.middle_east_countries = 0 }

    # Populate continent arrays by checking each country from global.countries
    for_loop_effect = {
        start = 0
        end = global.countries^num
        value = i

        # Get the country at this index
        set_temp_variable = { current_country = global.countries^i }

        # Check which continent this country belongs to using capital state
        var:current_country = {
            if = {
                limit = { any_core_state = { is_on_continent = europe } }
                if = {
                    limit = { capital_scope = { is_on_continent = europe }  }
                    add_to_array = { global.europe_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = asia } }
                if = {
                    limit = { capital_scope = { is_on_continent = asia }  }
                    add_to_array = { global.asia_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = africa } }
                if = {
                    limit = { capital_scope = { is_on_continent = africa }  }
                    add_to_array = { global.africa_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = north_america } }
                if = {
                    limit = { capital_scope = { is_on_continent = north_america }  }
                    add_to_array = { global.north_america_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = south_america } }
                if = {
                    limit = { capital_scope = { is_on_continent = south_america }  }
                    add_to_array = { global.south_america_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = australia } }
                if = {
                    limit = { capital_scope = { is_on_continent = australia }  }
                    add_to_array = { global.oceania_countries = THIS }
                }
            }
            else_if = {
                limit = { any_core_state = { is_on_continent = middle_east } }
                if = {
                    limit = { capital_scope = { is_on_continent = middle_east }  }
                    add_to_array = { global.middle_east_countries = THIS }
                }
            }
        }
    }
}

# ============================================================================
# TAG MANAGEMENT OPERATIONS
# ============================================================================

# Enable event system for selected tag
enable_for_selected_tag = {
    if = {
        limit = { has_variable = settings_current_selected_country }
        # Use the stored selected country
        var:settings_current_selected_country = {
            set_country_flag = events_activated
            log = "CHAOS REDUX TAG MANAGEMENT: Event system ENABLED for [This.GetTag] ([This.GetName])"

            # Add to enabled countries list if not already there
            if = {
                limit = { NOT = { is_in_array = { global.enabled_countries_list = THIS } } }
                ROOT = {
                    add_to_array = { global.enabled_countries_list = PREV }
                    add_to_variable = { global.enabled_countries_count = 1 }
                }
            }
        }
        update_enabled_countries_list = yes
    }
    else = {
        log = "CHAOS REDUX TAG MANAGEMENT: Cannot enable - no country selected in current filter"
    }
}

# Disable event system for selected tag
disable_for_selected_tag = {
    if = {
        limit = { has_variable = settings_current_selected_country }
        # Use the stored selected country
        var:settings_current_selected_country = {
            clr_country_flag = events_activated
            log = "CHAOS REDUX TAG MANAGEMENT: Event system DISABLED for [This.GetTag] ([This.GetName])"

            # Remove from enabled countries list
            if = {
                limit = { is_in_array = { global.enabled_countries_list = THIS } }
                ROOT = {
                    remove_from_array = { global.enabled_countries_list = PREV }
                    subtract_from_variable = { global.enabled_countries_count = 1 }
                }
            }
        }

        update_enabled_countries_list = yes

        # Handle disable previous tag functionality if this was the current player
        if = {
            limit = {
                has_global_flag = settings_disable_previous_tag
                check_variable = { settings_current_selected_country = THIS }
            }
            log = "CHAOS REDUX TAG MANAGEMENT: Disabled event system for current player tag as requested"
        }
    }
    else = {
        log = "CHAOS REDUX TAG MANAGEMENT: Cannot disable - no country selected in current filter"
    }
}

# Toggle event system for selected tag
toggle_event_system_for_selected_tag = {
    if = {
        limit = { has_variable = settings_current_selected_country }
        # Check if this country is currently enabled
        var:settings_current_selected_country = {
            if = {
                limit = { has_country_flag = events_activated }
                ROOT = { disable_for_selected_tag = yes }
            }
            else = {
                ROOT = { enable_for_selected_tag = yes }
            }
        }
    }
    else = {
        log = "CHAOS REDUX TAG MANAGEMENT: Cannot toggle - no country selected in current filter"
    }
}

# Toggle auto enable on tag switch setting
toggle_auto_enable_on_switch = {
    if = {
        limit = { has_global_flag = settings_auto_enable_on_switch }
        clr_global_flag = settings_auto_enable_on_switch
        log = "CHAOS REDUX TAG MANAGEMENT: Auto-enable on tag switch DISABLED (checkbox unchecked)"
    }
    else = {
        set_global_flag = settings_auto_enable_on_switch
        log = "CHAOS REDUX TAG MANAGEMENT: Auto-enable on tag switch ENABLED (checkbox checked)"
    }

    # Update global enabled countries list after changing settings
    update_enabled_countries_list = yes
}

# Toggle disable previous tag setting
toggle_disable_previous_tag = {
    if = {
        limit = { has_global_flag = settings_disable_previous_tag }
        clr_global_flag = settings_disable_previous_tag
        log = "CHAOS REDUX TAG MANAGEMENT: Disable previous tag DISABLED (checkbox unchecked)"
    }
    else = {
        set_global_flag = settings_disable_previous_tag
        log = "CHAOS REDUX TAG MANAGEMENT: Disable previous tag ENABLED (checkbox checked)"
    }

    # Update global enabled countries list after changing settings
    update_enabled_countries_list = yes
}

# Update enabled countries list for display
update_enabled_countries_list = {
    set_variable = { global.enabled_countries_count = 0 }
    clear_array = global.enabled_countries_list

    every_possible_country = {
        limit = { has_country_flag = events_activated }
        add_to_array = { global.enabled_countries_list = THIS }
        add_to_variable = { global.enabled_countries_count = 1 }
    }

}

# Reset tag management to default values
reset_tag_management_to_defaults = {
    set_variable = { settings_selected_tag_index = 0 }
    set_variable = { settings_tag_increment_mode = @DEFAULT_TAG_MANAGEMENT_MODE }
    set_global_flag = settings_auto_enable_on_switch
    set_global_flag = settings_disable_previous_tag
    set_variable = { settings_country_filter = @COUNTRY_FILTER_ALL }
    set_variable = { settings_continent_sort = @CONTINENT_SORT_ALPHABETICAL }

    # Re-initialize continent arrays
    update_filtered_countries_list = yes
    update_selected_tag_info = yes
}

# ============================================================================
# PLAYER TAG SWITCH HANDLING
# ============================================================================

# Check if the player has switched countries and handle auto-enable/disable settings
check_for_player_tag_switch = {
}

# Handle player tag switch based on settings (called manually from GUI)
handle_player_tag_switch = {
    # Handle auto-enable on switch
    if = {
        limit = { has_global_flag = settings_auto_enable_on_switch }
        set_country_flag = events_activated
        # Add to enabled countries list if not already there
        if = {
            limit = { NOT = { is_in_array = { global.enabled_countries_list = THIS } } }
            add_to_array = { global.enabled_countries_list = THIS }
            add_to_variable = { global.enabled_countries_count = 1 }
        }
        log = "CHAOS REDUX TAG MANAGEMENT: Auto-enabled event system for [This.GetTag] ([This.GetName]) on tag switch"
    }

    # Update the enabled countries list
    update_enabled_countries_list = yes
}








###############################################################################################################

#   #####                                 #     #
#  #     # #    #   ##    ####   ####     ##   ## ###### ##### ###### #####
#  #       #    #  #  #  #    # #         # # # # #        #   #      #    #
#  #       ###### #    # #    #  ####     #  #  # #####    #   #####  #    #
#  #       #    # ###### #    #      #    #     # #        #   #      #####
#  #     # #    # #    # #    # #    #    #     # #        #   #      #   #
#   #####  #    # #    #  ####   ####     #     # ######   #   ###### #    #

###############################################################################################################

# ============================================================================
# CHAOS METER SYSTEM
# ============================================================================

# Initialize chaos meter settings
initialize_chaos_meter_settings = {
    # Initialize settings chaos meter value to current actual chaos meter value
    if = {
        limit = { has_variable = global.chaos_meter_value }
        set_variable = { settings_chaos_meter_value = global.chaos_meter_value }
    }
    else = {
        set_variable = { settings_chaos_meter_value = 0 }
    }

    # Initialize increment mode
    set_variable = { settings_chaos_increment_mode = @DEFAULT_CHAOS_INCREMENT_MODE }

    # Initialize tier based on current value
    update_settings_chaos_tier = yes
}

# ============================================================================
# CHAOS METER VALUE MANAGEMENT
# ============================================================================

# Decrease chaos meter value
decrease_chaos_meter_value = {
    set_temp_variable = { new_value = settings_chaos_meter_value }
    subtract_from_temp_variable = { new_value = settings_chaos_increment_mode }

    clamp_temp_variable = {
        var = new_value
        min = 0
    }

    set_variable = { settings_chaos_meter_value = new_value }
    update_settings_chaos_tier = yes
}

# Increase chaos meter value
increase_chaos_meter_value = {
    set_temp_variable = { new_value = settings_chaos_meter_value }
    add_to_temp_variable = { new_value = settings_chaos_increment_mode }

    # Cap at 1500 for practical reasons
    clamp_temp_variable = {
        var = new_value
        max = 1500
    }

    set_variable = { settings_chaos_meter_value = new_value }
    update_settings_chaos_tier = yes
}

# Toggle chaos meter increment mode (5 -> 10 -> 1 -> 5)
toggle_chaos_increment_mode = {
    if = {
        limit = { check_variable = { settings_chaos_increment_mode = 5 } }
        # Switch from 5 to 10
        set_variable = { settings_chaos_increment_mode = 10 }
    }
    else_if = {
        limit = { check_variable = { settings_chaos_increment_mode = 10 } }
        # Switch from 10 to 1
        set_variable = { settings_chaos_increment_mode = 1 }
    }
    else = {
        # Switch from 1 to 5 (default case)
        set_variable = { settings_chaos_increment_mode = 5 }
    }
}

# ============================================================================
# CHAOS TIER MANAGEMENT
# ============================================================================

# Update settings chaos tier based on current settings value
update_settings_chaos_tier = {
    # Clear all tier flags first
    clr_country_flag = settings_chaos_tier_0
    clr_country_flag = settings_chaos_tier_1
    clr_country_flag = settings_chaos_tier_2
    clr_country_flag = settings_chaos_tier_3
    clr_country_flag = settings_chaos_tier_4
    clr_country_flag = settings_chaos_tier_final

    # Set appropriate tier flag and value
    if = {
        limit = { check_variable = { settings_chaos_meter_value > @chaos_tier_4_MAX } }
        set_country_flag = settings_chaos_tier_final
        set_variable = { settings_chaos_tier = @chaos_tier_final }
    }
    else_if = {
        limit = { check_variable = { settings_chaos_meter_value > @chaos_tier_3_MAX } }
        set_country_flag = settings_chaos_tier_4
        set_variable = { settings_chaos_tier = @chaos_tier_4 }
    }
    else_if = {
        limit = { check_variable = { settings_chaos_meter_value > @chaos_tier_2_MAX } }
        set_country_flag = settings_chaos_tier_3
        set_variable = { settings_chaos_tier = @chaos_tier_3 }
    }
    else_if = {
        limit = { check_variable = { settings_chaos_meter_value > @chaos_tier_1_MAX } }
        set_country_flag = settings_chaos_tier_2
        set_variable = { settings_chaos_tier = @chaos_tier_2 }
    }
    else_if = {
        limit = { check_variable = { settings_chaos_meter_value > @chaos_tier_0_MAX } }
        set_country_flag = settings_chaos_tier_1
        set_variable = { settings_chaos_tier = @chaos_tier_1 }
    }
    else = {
        set_country_flag = settings_chaos_tier_0
        set_variable = { settings_chaos_tier = @chaos_tier_0 }
    }
}

# Cycle to previous chaos tier
cycle_chaos_tier_prev = {
    if = {
        limit = { has_country_flag = settings_chaos_tier_0 }
        # From Calm to World Collapse
        set_variable = { settings_chaos_meter_value = @chaos_tier_final_PLUS }
        set_variable = { settings_chaos_tier = @chaos_tier_final }
        clr_country_flag = settings_chaos_tier_0
        set_country_flag = settings_chaos_tier_final
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_1 }
        # From Gathering Storm to Calm World
        set_variable = { settings_chaos_meter_value = @chaos_tier_0_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_0 }
        clr_country_flag = settings_chaos_tier_1
        set_country_flag = settings_chaos_tier_0
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_2 }
        # From Rising Chaos to Gathering Storm
        set_variable = { settings_chaos_meter_value = @chaos_tier_1_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_1 }
        clr_country_flag = settings_chaos_tier_2
        set_country_flag = settings_chaos_tier_1
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_3 }
        # From Chaos Tier to Rising Chaos
        set_variable = { settings_chaos_meter_value = @chaos_tier_2_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_2 }
        clr_country_flag = settings_chaos_tier_3
        set_country_flag = settings_chaos_tier_2
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_4 }
        # From Critical to Chaos Tier
        set_variable = { settings_chaos_meter_value = @chaos_tier_3_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_3 }
        clr_country_flag = settings_chaos_tier_4
        set_country_flag = settings_chaos_tier_3
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_final }
        # From World Collapse to Critical
        set_variable = { settings_chaos_meter_value = @chaos_tier_4_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_4 }
        clr_country_flag = settings_chaos_tier_final
        set_country_flag = settings_chaos_tier_4
    }
}

# Cycle to next chaos tier
cycle_chaos_tier_next = {
    if = {
        limit = { has_country_flag = settings_chaos_tier_0 }
        # From Calm to Gathering Storm
        set_variable = { settings_chaos_meter_value = @chaos_tier_1_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_1 }
        clr_country_flag = settings_chaos_tier_0
        set_country_flag = settings_chaos_tier_1
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_1 }
        # From Gathering Storm to Rising Chaos
        set_variable = { settings_chaos_meter_value = @chaos_tier_2_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_2 }
        clr_country_flag = settings_chaos_tier_1
        set_country_flag = settings_chaos_tier_2
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_2 }
        # From Rising Chaos to Chaos Tier
        set_variable = { settings_chaos_meter_value = @chaos_tier_3_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_3 }
        clr_country_flag = settings_chaos_tier_2
        set_country_flag = settings_chaos_tier_3
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_3 }
        # From Chaos Tier to Critical
        set_variable = { settings_chaos_meter_value = @chaos_tier_4_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_4 }
        clr_country_flag = settings_chaos_tier_3
        set_country_flag = settings_chaos_tier_4
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_4 }
        # From Critical to World Collapse
        set_variable = { settings_chaos_meter_value = @chaos_tier_final_PLUS }
        set_variable = { settings_chaos_tier = @chaos_tier_final }
        clr_country_flag = settings_chaos_tier_4
        set_country_flag = settings_chaos_tier_final
    }
    else_if = {
        limit = { has_country_flag = settings_chaos_tier_final }
        # From World Collapse to Calm World
        set_variable = { settings_chaos_meter_value = @chaos_tier_0_MIN }
        set_variable = { settings_chaos_tier = @chaos_tier_0 }
        clr_country_flag = settings_chaos_tier_final
        set_country_flag = settings_chaos_tier_0
    }
}

# ============================================================================
# CHAOS METER UPDATE SYSTEM
# ============================================================================

# Update actual chaos meter to match preview settings
update_actual_chaos_meter = {
    # Set the actual chaos meter value
    set_variable = { global.chaos_meter_value = settings_chaos_meter_value }

    # Update actual chaos meter tier
    update_chaos_meter_tier = yes

    log = "CHAOS REDUX SETTINGS: Chaos meter updated to [?settings_chaos_meter_value] via settings panel"
}

# Toggle chaos meter disabled state
toggle_chaos_meter_disabled = {
    if = {
        limit = { has_global_flag = settings_chaos_meter_disabled }
        # Re-enabling chaos meter
        clr_global_flag = settings_chaos_meter_disabled

        # Restore the chaos meter value from backup if it exists
        if = {
            limit = { has_variable = global.chaos_meter_backup_value }
            set_variable = { global.chaos_meter_value = global.chaos_meter_backup_value }
            clear_variable = global.chaos_meter_backup_value

            # Update chaos meter tier after restoring value
            update_chaos_meter_tier = yes
        }

        log = "CHAOS REDUX SETTINGS: Chaos meter ENABLED - value restored to [?global.chaos_meter_value]"
    }
    else = {
        # Disabling chaos meter
        set_global_flag = settings_chaos_meter_disabled

        # Backup current chaos meter value before setting to 0
        if = {
            limit = { has_variable = global.chaos_meter_value }
            set_variable = { global.chaos_meter_backup_value = global.chaos_meter_value }
        }
        else = {
            set_variable = { global.chaos_meter_backup_value = 0 }
        }

        # Set chaos meter to 0 temporarily
        set_variable = { global.chaos_meter_value = 0 }

        update_chaos_meter_tier = yes

        log = "CHAOS REDUX SETTINGS: Chaos meter DISABLED - backed up value [?global.chaos_meter_backup_value] and set to 0"
    }
}

# Reset chaos meter settings to defaults
reset_chaos_meter_to_defaults = {
    # Reset to current actual chaos meter value, or 0 if not initialized
    if = {
        limit = { has_variable = global.chaos_meter_value }
        set_variable = { settings_chaos_meter_value = global.chaos_meter_value }
    }
    else = {
        set_variable = { settings_chaos_meter_value = 0 }
    }

    # Reset increment mode to default (10)
    set_variable = { settings_chaos_increment_mode = @DEFAULT_CHAOS_INCREMENT_MODE }

    clr_global_flag = settings_chaos_meter_disabled

    # Update tier
    update_settings_chaos_tier = yes
}

toggle_world_end = {


    if = {
        limit = { NOT = { has_global_flag = world_end_disabled } }
        set_global_flag = world_end_disabled
        # Backup the world end flag
        if = {
            limit = { has_global_flag = world_end }
            set_variable = { global.world_end_backup = 1 }
            clr_global_flag = world_end
        }
        else = {
            set_variable = { global.world_end_backup = 0 }
        }

        log = "CHAOS REDUX SETTINGS: World end scenario mechanic has been DISABLED"
    }
    else = {
        clr_global_flag = world_end_disabled
        if = {
            limit = { check_variable = { global.world_end_backup = 1 } }
            set_global_flag = world_end
        }

        log = "CHAOS REDUX SETTINGS: World end scenario mechanic has been ENABLED"
    }
}

###############################################################################################################

#     #                                                         #####
#    # #   #####  #    #   ##   #    #  ####  ###### #####     #     # ###### ##### ##### # #    #  ####   ####
#   #   #  #    # #    #  #  #  ##   # #    # #      #    #    #       #        #     #   # ##   # #    # #
#  #     # #    # #    # #    # # #  # #      #####  #    #     #####  #####    #     #   # # #  # #       ####
#  ####### #    # #    # ###### #  # # #      #      #    #          # #        #     #   # #  # # #  ###      #
#  #     # #    #  #  #  #    # #   ## #    # #      #    #    #     # #        #     #   # #   ## #    # #    #
#  #     # #####    ##   #    # #    #  ####  ###### #####      #####  ######   #     #   # #    #  ####   ####

###############################################################################################################

# Initialize advanced settings
initialize_advanced_settings = {
    # Set default increment mode
    set_variable = { settings_advanced_increment_mode = @DEFAULT_ADVANCED_INCREMENT_MODE }
}

# ============================================================================
# RECOVERY RATE MANAGEMENT
# ============================================================================

# Decrease recovery rate
decrease_recovery_rate = {
    set_temp_variable = { new_value = global.settings_recovery_rate }
    subtract_from_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_RECOVERY_RATE
    }

    set_variable = { global.settings_recovery_rate = new_value }
}

# Increase recovery rate
increase_recovery_rate = {
    set_temp_variable = { new_value = global.settings_recovery_rate }
    add_to_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_RECOVERY_RATE
    }

    set_variable = { global.settings_recovery_rate = new_value }
}

# ============================================================================
# CAP REDUCTION MANAGEMENT
# ============================================================================

# Decrease cap reduction
decrease_cap_reduction = {
    set_temp_variable = { new_value = global.settings_cap_reduction }

    # Calculate increment based on mode: 1% = 0.01, 5% = 0.05, 10% = 0.10
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        subtract_from_temp_variable = { new_value = 0.01 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        subtract_from_temp_variable = { new_value = 0.05 }
    }
    else = {
        # Mode 10 or default
        subtract_from_temp_variable = { new_value = 0.10 }
    }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_CAP_REDUCTION
    }

    set_variable = { global.settings_cap_reduction = new_value }
}

# Increase cap reduction
increase_cap_reduction = {
    set_temp_variable = { new_value = global.settings_cap_reduction }

    # Calculate increment based on mode: 1% = 0.01, 5% = 0.05, 10% = 0.10
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        add_to_temp_variable = { new_value = 0.01 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        add_to_temp_variable = { new_value = 0.05 }
    }
    else = {
        # Mode 10 or default
        add_to_temp_variable = { new_value = 0.10 }
    }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_CAP_REDUCTION
    }

    set_variable = { global.settings_cap_reduction = new_value }
}

# ============================================================================
# MAJOR WEIGHT PER MINOR MANAGEMENT
# ============================================================================

# Decrease major weight per minor
decrease_major_weight_per_minor = {
    set_temp_variable = { new_value = global.settings_major_weight_per_minor }
    subtract_from_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_MAJOR_WEIGHT_PER_MINOR
    }

    set_variable = { global.settings_major_weight_per_minor = new_value }
}

# Increase major weight per minor
increase_major_weight_per_minor = {
    set_temp_variable = { new_value = global.settings_major_weight_per_minor }
    add_to_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_MAJOR_WEIGHT_PER_MINOR
    }

    set_variable = { global.settings_major_weight_per_minor = new_value }
}

# ============================================================================
# EVENT WEIGHT MANAGEMENT
# ============================================================================

# Decrease event weight
decrease_event_weight = {
    set_temp_variable = { new_value = global.settings_event_weight }
    subtract_from_temp_variable = { new_value = 100 }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_EVENT_WEIGHT
    }

    set_variable = { global.settings_event_weight = new_value }
}

# Increase event weight
increase_event_weight = {
    set_temp_variable = { new_value = global.settings_event_weight }
    add_to_temp_variable = { new_value = 100 }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_EVENT_WEIGHT
    }

    set_variable = { global.settings_event_weight = new_value }
}

# ============================================================================
# TIMER MODIFIER MANAGEMENT
# ============================================================================

# Decrease timer modifier
decrease_timer_modifier = {
    set_temp_variable = { new_value = global.settings_timer_modifier }
    subtract_from_temp_variable = { new_value = 0.1 }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_TIMER_MODIFIER
    }

    set_variable = { global.settings_timer_modifier = new_value }
}

# Increase timer modifier
increase_timer_modifier = {
    set_temp_variable = { new_value = global.settings_timer_modifier }
    add_to_temp_variable = { new_value = 0.1 }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_TIMER_MODIFIER
    }

    set_variable = { global.settings_timer_modifier = new_value }
}

# Update all timer modifiers based on settings value
update_all_timer_modifiers = {
    set_variable = { global.chaos_timer_modifier_calm = global.settings_timer_modifier }

    set_temp_variable = { gathering_mod = global.settings_timer_modifier }
    multiply_temp_variable = { gathering_mod = 0.8 }
    set_variable = { global.chaos_timer_modifier_gathering = gathering_mod }

    set_temp_variable = { rising_mod = global.settings_timer_modifier }
    multiply_temp_variable = { rising_mod = 0.7 }
    set_variable = { global.chaos_timer_modifier_rising = rising_mod }

    set_temp_variable = { chaos_mod = global.settings_timer_modifier }
    multiply_temp_variable = { chaos_mod = 0.6 }
    set_variable = { global.chaos_timer_modifier_chaos = chaos_mod }

    set_temp_variable = { critical_mod = global.settings_timer_modifier }
    multiply_temp_variable = { critical_mod = 0.5 }
    set_variable = { global.chaos_timer_modifier_critical = critical_mod }
    set_variable = { global.chaos_timer_modifier_collapse = critical_mod }
}

# ============================================================================
# ADVANCED SETTINGS INCREMENT MODE MANAGEMENT
# ============================================================================

# Toggle advanced settings increment mode
toggle_advanced_settings_increment_mode = {
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        set_variable = { settings_advanced_increment_mode = 5 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        set_variable = { settings_advanced_increment_mode = 10 }
    }
    else = {
        set_variable = { settings_advanced_increment_mode = 1 }
    }
}

# ============================================================================
# ADVANCED SETTINGS INDIVIDUAL CONTROLS
# ============================================================================

# Recovery Rate Controls
decrease_advanced_recovery_rate = {
    set_temp_variable = { new_value = global.settings_recovery_rate }
    subtract_from_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_RECOVERY_RATE
    }

    set_variable = { global.settings_recovery_rate = new_value }
}

increase_advanced_recovery_rate = {
    set_temp_variable = { new_value = global.settings_recovery_rate }
    add_to_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_RECOVERY_RATE
    }

    set_variable = { global.settings_recovery_rate = new_value }
}

# Cap Reduction Controls (uses increment mode: 1% for mode 1, 5% for mode 5, 10% for mode 10)
decrease_advanced_cap_reduction = {
    set_temp_variable = { new_value = global.settings_cap_reduction }

    # Calculate increment based on mode: 1% = 0.01, 5% = 0.05, 10% = 0.10
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        subtract_from_temp_variable = { new_value = 0.01 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        subtract_from_temp_variable = { new_value = 0.05 }
    }
    else = {
        # Mode 10 or default
        subtract_from_temp_variable = { new_value = 0.10 }
    }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_CAP_REDUCTION
    }

    set_variable = { global.settings_cap_reduction = new_value }
}

increase_advanced_cap_reduction = {
    set_temp_variable = { new_value = global.settings_cap_reduction }

    # Calculate increment based on mode: 1% = 0.01, 5% = 0.05, 10% = 0.10
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        add_to_temp_variable = { new_value = 0.01 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        add_to_temp_variable = { new_value = 0.05 }
    }
    else = {
        # Mode 10 or default
        add_to_temp_variable = { new_value = 0.10 }
    }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_CAP_REDUCTION
    }

    set_variable = { global.settings_cap_reduction = new_value }
}

# Major Weight Controls
decrease_advanced_major_weight = {
    set_temp_variable = { new_value = global.settings_major_weight_per_minor }
    subtract_from_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        min = @ADVANCED_MIN_MAJOR_WEIGHT_PER_MINOR
    }

    set_variable = { global.settings_major_weight_per_minor = new_value }
}

increase_advanced_major_weight = {
    set_temp_variable = { new_value = global.settings_major_weight_per_minor }
    add_to_temp_variable = { new_value = settings_advanced_increment_mode }

    clamp_temp_variable = {
        var = new_value
        max = @ADVANCED_MAX_MAJOR_WEIGHT_PER_MINOR
    }

    set_variable = { global.settings_major_weight_per_minor = new_value }
}

# Advanced Settings Increment Mode Toggle
toggle_advanced_increment_mode = {
    if = {
        limit = { check_variable = { settings_advanced_increment_mode = 1 } }
        set_variable = { settings_advanced_increment_mode = 5 }
    }
    else_if = {
        limit = { check_variable = { settings_advanced_increment_mode = 5 } }
        set_variable = { settings_advanced_increment_mode = 10 }
    }
    else = {
        set_variable = { settings_advanced_increment_mode = 1 }
    }
}

# Update Advanced Settings Values - Apply current settings to actual system
update_advanced_settings_values = {
    # Apply recovery rate
    set_variable = { global.minor_event_recovery_rate = global.settings_recovery_rate }

    # Apply cap reduction
    set_variable = { global.reduce_cap_factor = global.settings_cap_reduction }

    # Apply major weight per minor
    set_variable = { global.major_event_weight_per_minor = global.settings_major_weight_per_minor }

    # Apply event weight if it exists in settings
    if = {
        limit = { has_variable = global.settings_event_weight }
        set_variable = { global.default_event_weight = global.settings_event_weight }
    }

    # Apply timer modifier if it exists in settings
    if = {
        limit = { has_variable = global.settings_timer_modifier }
        update_all_timer_modifiers = yes
    }
}

# Reset advanced settings to defaults
reset_advanced_settings_to_defaults = {
    set_variable = { global.settings_recovery_rate = @DEFAULT_RECOVERY_RATE }
    set_variable = { global.settings_cap_reduction = @DEFAULT_REDUCE_CAP_FACTOR }
    set_variable = { global.settings_major_weight_per_minor = @DEFAULT_MAJOR_EVENT_WEIGHT_PER_MINOR }
    set_variable = { settings_advanced_increment_mode = @DEFAULT_ADVANCED_INCREMENT_MODE }
}