# ============================================================================
# CHAOS REDUX - CHAOS METER EFFECTS
# ============================================================================
# This file contains all scripted effects for the chaos meter system.
# ============================================================================

# ============================================================================
# CONSTANTS
# ============================================================================

# Basic Chaos Values
@CHAOS_PER_WORLD_TENSION = 1
@CHAOS_PER_MINOR_WAR = 1
@CHAOS_PER_MAJOR_WAR = 5
@CHAOS_PER_MINOR_PEACE = -1
@CHAOS_PER_MAJOR_PEACE = -3

# Annexation & Territory Changes
@CHAOS_PER_MINOR_ANNEX = 2
@CHAOS_PER_MAJOR_ANNEX = 10
@CHAOS_PER_PUPPET = 3
@CHAOS_PER_LIBERATE = -2
@CHAOS_PER_LIBERATE_DEMOCRATIC = -5
@CHAOS_PER_RELEASE_FREE = -5
@CHAOS_PER_SUBJECT_FREE = -3
@CHAOS_PER_SUBJECT_ANNEXED = 2

# Military Actions
@CHAOS_PER_NUKE = 2 # Low, so it's not abused
@CHAOS_PER_MOBILIZATION_UP_MAJOR = 1
@CHAOS_PER_MOBILIZATION_DOWN_MAJOR = -1

# Political Changes
@CHAOS_PER_COUP_MINOR = 1
@CHAOS_PER_COUP_MAJOR = 3
@CHAOS_PER_CIVIL_WAR_MINOR = 1
@CHAOS_PER_CIVIL_WAR_MAJOR = 5

# Ideology Changes
@CHAOS_PER_IDEOLOGY_CHANGE_MINOR_DEMOCRATIC = -2
@CHAOS_PER_IDEOLOGY_CHANGE_MINOR_NON_DEMOCRATIC = 1
@CHAOS_PER_IDEOLOGY_CHANGE_MAJOR_DEMOCRATIC = -5
@CHAOS_PER_IDEOLOGY_CHANGE_MAJOR_NON_DEMOCRATIC = 5

# Faction Changes
@CHAOS_PER_FACTION_CREATE = 2
@CHAOS_PER_FACTION_DISBAND = -2
@CHAOS_PER_FACTION_JOIN_MINOR = 1
@CHAOS_PER_FACTION_JOIN_MAJOR = 3
@CHAOS_PER_FACTION_LEAVE_MINOR = -1
@CHAOS_PER_FACTION_LEAVE_MAJOR = -5
@CHAOS_PER_FACTION_JOIN_BOTH_DEMOCRATIC_MINOR = -1
@CHAOS_PER_FACTION_JOIN_BOTH_DEMOCRATIC_MAJOR = -3
@CHAOS_PER_FACTION_LEAVE_BOTH_DEMOCRATIC_MINOR = 0
@CHAOS_PER_FACTION_LEAVE_BOTH_DEMOCRATIC_MAJOR = 0

# Diplomacy
@CHAOS_PER_JUSTIFYING_WARGOAL_MAJOR = 1
@CHAOS_PER_GUARANTEE_MAJOR = 1
@CHAOS_PER_WARGOAL_EXPIRE_MAJOR = -1

# Subtle Actions
@CHAOS_PER_LEND_LEASE = 1
@CHAOS_PER_CALL_ALLIES = 1
@CHAOS_PER_JOIN_ALLIES = 1
@CHAOS_PER_NEW_TERM_ELECTION = -1
@CHAOS_PER_STAGE_COUP = 1
@CHAOS_PER_COUP_SUCCEEDED = 1
@CHAOS_PER_CAPITULATION = 1
@CHAOS_PER_UNCAPITULATION = -1
@CHAOS_PER_GOVERNMENT_EXILED = 1
@CHAOS_PER_EXILE_REINSTATED = -1

# Economic Thresholds
@MILS_PER_CHAOS_INCREASE = 100
@DIVISIONS_PER_CHAOS_INCREASE = 100
@CASUALTIES_PER_CHAOS = 250 # 250k casualties per chaos point
@STABILITY_CHANGE_PER_CHAOS = 0.01
@DEMOCRACY_CHANGE_PER_CHAOS = 0.01

# Chaos Tier Boundaries
@chaos_tier_1_BOUNDARY = 200
@chaos_tier_2_BOUNDARY = 400
@chaos_tier_3_BOUNDARY = 600
@chaos_tier_4_BOUNDARY = 800
@chaos_tier_final_BOUNDARY = 1000

# Update Thresholds
@MIN_TENSION_CHANGE = 1
@MIN_CASUALTY_CHANGE_K = 1

# ============================================================================
# INITIALIZATION
# ============================================================================

initialize_chaos_meter_system = {
    set_variable = { global.chaos_meter_value = 0 }

    # Initialize disabled state to enabled (clear flag = enabled, set flag = disabled)
    clr_global_flag = settings_chaos_meter_disabled

    # Initialize tracking variables
    set_variable = { global.last_casualty_count = 0 }
    set_variable = { global.highest_world_tension_recorded = 0 }
    set_variable = { global.current_world_tension = 0 }
    set_variable = { global.last_total_mils = 0 }
    set_variable = { global.last_total_divisions = 0 }
    set_variable = { global.last_average_stability = 0 }
    set_variable = { global.total_countries_for_stability = 0 }
    set_variable = { global.last_average_democracy = 0 }
    set_variable = { global.total_countries_for_democracy = 0 }

    every_country = {
        add_to_variable = { global.last_total_divisions = num_armies }
        add_to_variable = { global.last_average_stability = stability }
        add_to_variable = { global.total_countries_for_stability = 1 }
        add_to_variable = { global.last_total_mils = num_of_military_factories }

        # Add democracy tracking
        if = {
            limit = { has_government = democratic }
            add_to_variable = { global.last_average_democracy = 1 }
        }
        add_to_variable = { global.total_countries_for_democracy = 1 }
    }

    if = {
        limit = { check_variable = { global.total_countries_for_stability > 0 } }
        divide_variable = { global.last_average_stability = global.total_countries_for_stability }
    }

    if = {
        limit = { check_variable = { global.total_countries_for_democracy > 0 } }
        divide_variable = { global.last_average_democracy = global.total_countries_for_democracy }
    }

    update_chaos_meter_tier = yes
    log = "CHAOS METER: System initialized with value [?global.chaos_meter_value]"
}

# ============================================================================
# CHAOS METER VALUE MANAGEMENT
# ============================================================================

add_chaos_meter_value = {
    # Input: temp variable chaos_change

    # Check if chaos meter is disabled
    if = {
        limit = { has_global_flag = settings_chaos_meter_disabled }
        log = "CHAOS METER: Update blocked - chaos meter is disabled"
    }
    else_if = {
        limit = { check_variable = { global.chaos_meter_value < @chaos_tier_final_BOUNDARY } }

        round_temp_variable = chaos_change
        add_to_variable = { global.chaos_meter_value = chaos_change }

        clamp_variable = {
            var = global.chaos_meter_value
            min = 0
        }

        round_variable = global.chaos_meter_value
        update_chaos_meter_tier = yes

        if = {
            limit = { check_variable = { chaos_change > 0 } }
            log = "CHAOS METER: Increased by [?chaos_change] to [?global.chaos_meter_value]"
        }
        else = {
            set_temp_variable = { abs_change = chaos_change }
            multiply_temp_variable = { abs_change = -1 }
            log = "CHAOS METER: Decreased by [?abs_change] to [?global.chaos_meter_value]"
        }
    }
    else = {
        log = "CHAOS METER: World Collapse active - chaos meter locked at [?global.chaos_meter_value]"
    }
}

# Clear all tier flags (no longer needed with integer flag system)
clear_all_tier_flags = {
    clr_global_flag = chaos_tier
}

update_chaos_meter_tier = {

    # Store current tier state for change detection
    set_temp_variable = { old_tier_value = 0 }
    if = { limit = { has_global_flag = { flag = chaos_tier value = 5 } } set_temp_variable = { old_tier_value = 5 } }
    else_if = { limit = { has_global_flag = { flag = chaos_tier value = 4 } } set_temp_variable = { old_tier_value = 4 } }
    else_if = { limit = { has_global_flag = { flag = chaos_tier value = 3 } } set_temp_variable = { old_tier_value = 3 } }
    else_if = { limit = { has_global_flag = { flag = chaos_tier value = 2 } } set_temp_variable = { old_tier_value = 2 } }
    else_if = { limit = { has_global_flag = { flag = chaos_tier value = 1 } } set_temp_variable = { old_tier_value = 1 } }

    # Clear the flag and set new value
    clr_global_flag = chaos_tier

    if = {
        limit = { check_variable = { var = global.chaos_meter_value value = @chaos_tier_final_BOUNDARY compare = greater_than_or_equals } }
        set_global_flag = { flag = chaos_tier value = 5 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 5 } } }
            log = "CHAOS METER: Tier changed to WORLD COLLAPSE"
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = @chaos_tier_4_BOUNDARY compare = greater_than_or_equals } }
        set_global_flag = { flag = chaos_tier value = 4 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 4 } } }
            log = "CHAOS METER: Tier changed to TOTALEN CHAOS"
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = @chaos_tier_3_BOUNDARY compare = greater_than_or_equals } }
        set_global_flag = { flag = chaos_tier value = 3 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 3 } } }
            log = "CHAOS METER: Tier changed to CHAOS TIER"
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = @chaos_tier_2_BOUNDARY compare = greater_than_or_equals } }
        set_global_flag = { flag = chaos_tier value = 2 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 2 } } }
            log = "CHAOS METER: Tier changed to RISING CHAOS"
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = @chaos_tier_1_BOUNDARY compare = greater_than_or_equals } }
        set_global_flag = { flag = chaos_tier value = 1 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 1 } } }
            log = "CHAOS METER: Tier changed to GATHERING STORM"
        }
    }
    else = {
        set_global_flag = { flag = chaos_tier value = 0 }
        if = {
            limit = { NOT = { check_variable = { old_tier_value = 0 } } }
            log = "CHAOS METER: Tier changed to CALM WORLD"
        }
    }
}

world_end_scenario_triggered = {


}

# ============================================================================
# ON ACTION HANDLERS
# ============================================================================

chaos_meter_on_war_relation_added = {
    # on_war_relation_added: ROOT = attacker, FROM = defender
    if = {
        limit = {
            NOT = {
                ROOT = {
                    OR = {
                        original_tag = ZZZ
                        has_country_flag = zombie_outbreak_dynamic_country
                    }
                }
            }

        }
        if = {
            limit = { ROOT = { is_major = yes } FROM = { is_major = yes } }
            set_temp_variable = { chaos_change = @CHAOS_PER_MAJOR_WAR }
            log = "CHAOS METER: Major [ROOT.GetName] declared war on Major [FROM.GetName] ([?chaos_change|=] chaos)"
            add_chaos_meter_value = yes
        }
        else_if = {
            limit = { NOT = { OR = { ROOT = { is_subject = yes } FROM = { is_subject = yes } is_in_faction = yes } } }
            set_temp_variable = { chaos_change = @CHAOS_PER_MINOR_WAR }
            log = "CHAOS METER: [ROOT.GetName] declared war on [FROM.GetName] ([?chaos_change|=] chaos)"
            add_chaos_meter_value = yes
        }

    }
    else = {
        log = "CHAOS METER: Zombie [ROOT.GetName] declared war on [FROM.GetName] - no chaos increase from zombie wars"
    }
}

chaos_meter_on_peace = {
    # on_peace has no FROM scope - THIS is the country that is no longer at war
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_MAJOR_PEACE }
        log = "CHAOS METER: Major [THIS.GetName] made peace ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_MINOR_PEACE }
        log = "CHAOS METER: Minor [THIS.GetName] made peace ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_annex = {
    # Check if annexed country is major or minor
    if = {
        limit = { FROM = { is_major = yes } }
        set_temp_variable = { chaos_change = @CHAOS_PER_MAJOR_ANNEX }
        log = "CHAOS METER: Major [FROM.GetName] was annexed by [THIS.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_MINOR_ANNEX }
        log = "CHAOS METER: Minor [FROM.GetName] was annexed by [THIS.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_puppet = {
    set_temp_variable = { chaos_change = @CHAOS_PER_PUPPET }
    log = "CHAOS METER: [FROM.GetName] was puppeted by [THIS.GetName] ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_liberate = {
    # Check if liberator is democratic
    if = {
        limit = { has_government = democratic }
        set_temp_variable = { chaos_change = @CHAOS_PER_LIBERATE_DEMOCRATIC }
        log = "CHAOS METER: Democratic [THIS.GetName] liberated [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_LIBERATE }
        log = "CHAOS METER: [THIS.GetName] liberated [FROM.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_release_as_free = {
    set_temp_variable = { chaos_change = @CHAOS_PER_RELEASE_FREE }
    log = "CHAOS METER: [FROM.GetName] was released as free nation by [THIS.GetName] ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_subject_free = {
    set_temp_variable = { chaos_change = @CHAOS_PER_SUBJECT_FREE }
    log = "CHAOS METER: [THIS.GetName] became free from subject status ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_subject_annexed = {
    set_temp_variable = { chaos_change = @CHAOS_PER_SUBJECT_ANNEXED }
    log = "CHAOS METER: Subject [FROM.GetName] was annexed by [THIS.GetName] ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_nuke_drop = {
    set_temp_variable = { chaos_change = @CHAOS_PER_NUKE }
    log = "CHAOS METER: Nuclear weapon dropped by [THIS.GetName] on [FROM.GetName] ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_mobilization_law_change = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_MOBILIZATION_UP_MAJOR }
        log = "CHAOS METER: Major [THIS.GetName] increased mobilization law ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_MOBILIZATION_UP_MAJOR }
        log = "CHAOS METER: Minor [THIS.GetName] increased mobilization law ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_coup = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_COUP_MAJOR }
        log = "CHAOS METER: Coup in major power [THIS.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_COUP_MINOR }
        log = "CHAOS METER: Coup in minor power [THIS.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_civil_war = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_CIVIL_WAR_MAJOR }
        log = "CHAOS METER: Civil war started in major power [THIS.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_CIVIL_WAR_MINOR }
        log = "CHAOS METER: Civil war started in minor power [THIS.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_ideology_change = {
    # The ruling party change triggers after the change, so we detect the new ideology
    if = {
        limit = {
            is_major = yes
            has_government = democratic
        }
        set_temp_variable = { chaos_change = @CHAOS_PER_IDEOLOGY_CHANGE_MAJOR_DEMOCRATIC }
        log = "CHAOS METER: Major power [THIS.GetName] changed to democratic ideology ([?chaos_change|=] chaos)"
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_IDEOLOGY_CHANGE_MAJOR_NON_DEMOCRATIC }
        log = "CHAOS METER: Major power [THIS.GetName] changed to non-democratic ideology ([?chaos_change|=] chaos)"
    }
    else_if = {
        limit = { has_government = democratic }
        set_temp_variable = { chaos_change = @CHAOS_PER_IDEOLOGY_CHANGE_MINOR_DEMOCRATIC }
        log = "CHAOS METER: Minor power [THIS.GetName] changed to democratic ideology ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_IDEOLOGY_CHANGE_MINOR_NON_DEMOCRATIC }
        log = "CHAOS METER: Minor power [THIS.GetName] changed to non-democratic ideology ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_created = {
    set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_CREATE }
    log = "CHAOS METER: [THIS.GetName] created a faction ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_disbanded = {
    set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_DISBAND }
    log = "CHAOS METER: Faction disbanded ([?chaos_change|=] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_join = {
    # Check if both joining country and faction leader are democratic
    set_temp_variable = { both_democratic = 0 }
    if = {
        limit = {
            has_government = democratic
            FROM = { has_government = democratic }
        }
        set_temp_variable = { both_democratic = 1 }
    }

    if = {
        limit = {
            is_major = yes
            check_variable = { both_democratic = 1 }
        }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_JOIN_BOTH_DEMOCRATIC_MAJOR }
        log = "CHAOS METER: Major democratic power [THIS.GetName] joined democratic faction led by [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    else_if = {
        limit = {
            check_variable = { both_democratic = 1 }
        }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_JOIN_BOTH_DEMOCRATIC_MINOR }
        log = "CHAOS METER: Minor democratic power [THIS.GetName] joined democratic faction led by [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_JOIN_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] joined faction led by [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_JOIN_MINOR }
        log = "CHAOS METER: Minor power [THIS.GetName] joined faction led by [FROM.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_leave = {
    # Check if both leaving country and current faction leader are democratic
    set_temp_variable = { both_democratic = 0 }
    if = {
        limit = {
            has_government = democratic
            FROM = { has_government = democratic }
        }
        set_temp_variable = { both_democratic = 1 }
    }

    # No effect for democratic countries leaving democratic factions
    if = {
        limit = {
            has_government = democratic
            check_variable = { both_democratic = 1 }
        }
        log = "CHAOS METER: Democratic power [THIS.GetName] left democratic faction (no chaos effect)"
    }
    else_if = {
        limit = {
            is_major = yes
            check_variable = { both_democratic = 1 }
        }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_LEAVE_BOTH_DEMOCRATIC_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] left democratic faction ([?chaos_change|=] chaos)"
        add_chaos_meter_value = yes
    }
    else_if = {
        limit = {
            check_variable = { both_democratic = 1 }
        }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_LEAVE_BOTH_DEMOCRATIC_MINOR }
        log = "CHAOS METER: Minor power [THIS.GetName] left democratic faction ([?chaos_change|=] chaos)"
        add_chaos_meter_value = yes
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_LEAVE_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] left faction ([?chaos_change|=] chaos)"
        add_chaos_meter_value = yes
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_FACTION_LEAVE_MINOR }
        log = "CHAOS METER: Minor power [THIS.GetName] left faction ([?chaos_change|=] chaos)"
        add_chaos_meter_value = yes
    }
}

chaos_meter_on_justifying_wargoal = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_JUSTIFYING_WARGOAL_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] is justifying war goal against [FROM.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_guarantee = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_GUARANTEE_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] guaranteed independence of [FROM.GetName] ([?chaos_change|=] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_wargoal_expire = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { chaos_change = @CHAOS_PER_WARGOAL_EXPIRE_MAJOR }
        log = "CHAOS METER: Major power [THIS.GetName] had war goal against [FROM.GetName] expire ([?chaos_change|=] chaos)"
    }
    add_chaos_meter_value = yes
}
# chaos_meter_on_call_allies = {
#     if = {
#         limit = { FROM = { is_subject = no } }
#         set_temp_variable = { chaos_change = @CHAOS_PER_CALL_ALLIES }
#         log = "CHAOS METER: [THIS.GetName] called allies into war against [FROM.GetName] ([?chaos_change|=] chaos)"
#         add_chaos_meter_value = yes
#     }
# }

chaos_meter_on_join_allies = {
    if = {
        limit = { ROOT = { is_subject = no } }
        set_temp_variable = { chaos_change = @CHAOS_PER_JOIN_ALLIES }
        log = "CHAOS METER: [THIS.GetName] joined allies in war ([?chaos_change|=] chaos)"
        add_chaos_meter_value = yes
    }
}

chaos_meter_on_new_term_election = {
    set_temp_variable = { chaos_change = @CHAOS_PER_NEW_TERM_ELECTION }
    log = "CHAOS METER: Major [THIS.GetName] held democratic elections ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_stage_coup = {
    set_temp_variable = { chaos_change = @CHAOS_PER_STAGE_COUP }
    log = "CHAOS METER: [THIS.GetName] staged coup attempt in [FROM.GetName] ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_coup_succeeded = {
    set_temp_variable = { chaos_change = @CHAOS_PER_COUP_SUCCEEDED }
    log = "CHAOS METER: Coup succeeded in [THIS.GetName] ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_capitulation = {
    if = {
        limit = { THIS = { is_major = yes } }
        set_temp_variable = { chaos_change = 3 }
        log = "CHAOS METER: Major [THIS.GetName] capitulated to [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    else = {
        set_temp_variable = { chaos_change = @CHAOS_PER_CAPITULATION }
        log = "CHAOS METER: Minor [THIS.GetName] capitulated to [FROM.GetName] ([?chaos_change|=] chaos)"
    }
    add_chaos_meter_value = yes
}

chaos_meter_on_uncapitulation = {
    # on_uncapitulation: ROOT = country affected (no FROM)
    set_temp_variable = { chaos_change = @CHAOS_PER_UNCAPITULATION }
    log = "CHAOS METER: [ROOT.GetName] was liberated from capitulation ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_government_exiled = {
    # on_government_exiled: ROOT = exile government, FROM = host country
    set_temp_variable = { chaos_change = @CHAOS_PER_GOVERNMENT_EXILED }
    log = "CHAOS METER: Government of [ROOT.GetName] went into exile in [FROM.GetName] ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_exile_reinstated = {
    # on_exile_government_reinstated: ROOT = government, FROM = former host
    set_temp_variable = { chaos_change = @CHAOS_PER_EXILE_REINSTATED }
    log = "CHAOS METER: Exiled government of [ROOT.GetName] was reinstated from [FROM.GetName] ([?chaos_change|=] chaos)"
    add_chaos_meter_value = yes
}







##############################################################################################################

#  ######     #    ### #       #     #    #     # ######  ######     #    ####### #######  #####
#  #     #   # #    #  #        #   #     #     # #     # #     #   # #      #    #       #     #
#  #     #  #   #   #  #         # #      #     # #     # #     #  #   #     #    #       #
#  #     # #     #  #  #          #       #     # ######  #     # #     #    #    #####    #####
#  #     # #######  #  #          #       #     # #       #     # #######    #    #             #
#  #     # #     #  #  #          #       #     # #       #     # #     #    #    #       #     #
#  ######  #     # ### #######    #        #####  #       ######  #     #    #    #######  #####

##############################################################################################################


chaos_meter_daily_update = {
    # Check if chaos meter is disabled
    if = {
        limit = { NOT = { has_global_flag = settings_chaos_meter_disabled } }
        chaos_meter_update_world_tension = yes
        chaos_meter_update_casualties = yes
        chaos_meter_update_factories = yes
        chaos_meter_update_divisions = yes
        chaos_meter_update_stability = yes
        chaos_meter_update_democracy = yes
    }
}

chaos_meter_update_world_tension = {
    set_temp_variable = { current_world_tension = global.threat }
    multiply_temp_variable = { current_world_tension = 100 }
    round_temp_variable = current_world_tension
    set_variable = { global.current_world_tension = current_world_tension }

    if = {
        limit = { check_variable = { current_world_tension > global.highest_world_tension_recorded } }
        set_temp_variable = { tension_increase = current_world_tension }
        subtract_from_temp_variable = { tension_increase = global.highest_world_tension_recorded }

        if = {
            limit = { check_variable = { var = tension_increase value = @MIN_TENSION_CHANGE compare = greater_than_or_equals } }
            set_temp_variable = { chaos_change = tension_increase }
            multiply_temp_variable = { chaos_change = @CHAOS_PER_WORLD_TENSION }
            add_chaos_meter_value = yes
            log = "CHAOS METER: World tension increased from [?global.highest_world_tension_recorded]% to [?current_world_tension]% ([?chaos_change|=] chaos)"
            set_variable = { global.highest_world_tension_recorded = current_world_tension }
        }
    }
    else_if = {
        limit = { check_variable = { current_world_tension < global.highest_world_tension_recorded } }
        set_temp_variable = { tension_decrease = global.highest_world_tension_recorded }
        subtract_from_temp_variable = { tension_decrease = current_world_tension }

        if = {
            limit = { check_variable = { var = tension_decrease value = @MIN_TENSION_CHANGE compare = greater_than_or_equals } }
            round_temp_variable = tension_decrease
            set_temp_variable = { chaos_change = tension_decrease }
            multiply_temp_variable = { chaos_change = @CHAOS_PER_WORLD_TENSION }
            multiply_temp_variable = { chaos_change = -1 }
            add_chaos_meter_value = yes

            set_temp_variable = { wt_decreased_from = current_world_tension }
            add_to_temp_variable = { wt_decreased_from = tension_decrease }
            log = "CHAOS METER: World tension decreased from [?wt_decreased_from]% to [?current_world_tension]% ([?chaos_change|=] chaos)"
            set_variable = { global.highest_world_tension_recorded = current_world_tension }
        }
    }
}

chaos_meter_update_casualties = {
    set_temp_variable = { current_casualties = 0 }
    every_country = {
        add_to_temp_variable = { current_casualties = casualties }
    }

    divide_temp_variable = { current_casualties = 1000 }
    set_temp_variable = { casualty_increase = current_casualties }
    subtract_from_temp_variable = { casualty_increase = global.last_casualty_count }

    if = {
        limit = { check_variable = { casualty_increase > @CASUALTIES_PER_CHAOS } }
        set_temp_variable = { chaos_from_casualties = casualty_increase }
        divide_temp_variable = { chaos_from_casualties = @CASUALTIES_PER_CHAOS }
        set_temp_variable = { chaos_change = chaos_from_casualties }

        if = {
            limit = { check_variable = { var = chaos_change value = @MIN_CASUALTY_CHANGE_K compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Increased by [?chaos_change] due to [?casualty_increase]k new casualties"
        }

        set_variable = { global.last_casualty_count = current_casualties }
    }
}

chaos_meter_update_factories = {
    set_temp_variable = { current_total_mils = 0 }
    every_country = {
        add_to_temp_variable = { current_total_mils = num_of_military_factories }
    }

    set_temp_variable = { mil_change = current_total_mils }
    subtract_from_temp_variable = { mil_change = global.last_total_mils }

    if = {
        limit = { check_variable = { mil_change > @MILS_PER_CHAOS_INCREASE } }
        set_temp_variable = { chaos_from_mils = mil_change }
        divide_temp_variable = { chaos_from_mils = @MILS_PER_CHAOS_INCREASE }
        set_temp_variable = { chaos_change = chaos_from_mils }

        if = {
            limit = { check_variable = { var = chaos_change value = @MIN_CASUALTY_CHANGE_K compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Arms buildup from [?mil_change] new military factories ([?chaos_change|=] chaos)"
        }

        set_variable = { global.last_total_mils = current_total_mils }
    }
}

chaos_meter_update_divisions = {
    set_temp_variable = { current_total_divisions = 0 }
    every_country = {
        add_to_temp_variable = { current_total_divisions = num_armies }
    }

    set_temp_variable = { division_change = current_total_divisions }
    subtract_from_temp_variable = { division_change = global.last_total_divisions }

    if = {
        limit = { check_variable = { division_change > @DIVISIONS_PER_CHAOS_INCREASE } }
        set_temp_variable = { chaos_from_divisions = division_change }
        divide_temp_variable = { chaos_from_divisions = @DIVISIONS_PER_CHAOS_INCREASE }
        round_temp_variable = chaos_from_divisions
        set_temp_variable = { chaos_change = chaos_from_divisions }

        if = {
            limit = { check_variable = { var = chaos_change value = @MIN_CASUALTY_CHANGE_K compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Military buildup from [?division_change] new divisions ([?chaos_change|=] chaos)"
        }

        set_variable = { global.last_total_divisions = current_total_divisions }
    }
}

chaos_meter_update_stability = {
    set_temp_variable = { current_total_stability = 0 }
    set_temp_variable = { current_country_count = 0 }

    every_country = {
        add_to_temp_variable = { current_total_stability = stability }
        add_to_temp_variable = { current_country_count = 1 }
    }

    set_temp_variable = { current_average_stability = 0 }
    if = {
        limit = { check_variable = { current_country_count > 0 } }
        set_temp_variable = { current_average_stability = current_total_stability }
        divide_temp_variable = { current_average_stability = current_country_count }
    }

    set_temp_variable = { stability_change = current_average_stability }
    subtract_from_temp_variable = { stability_change = global.last_average_stability }
    set_temp_variable = { abs_stability_change = stability_change }

    if = {
        limit = { check_variable = { stability_change < 0 } }
        multiply_temp_variable = { abs_stability_change = -1 }
    }

    if = {
        limit = { check_variable = { abs_stability_change > @STABILITY_CHANGE_PER_CHAOS } }
        set_temp_variable = { chaos_from_stability = stability_change }
        divide_temp_variable = { chaos_from_stability = @STABILITY_CHANGE_PER_CHAOS }
        round_temp_variable = chaos_from_stability
        set_temp_variable = { chaos_change = chaos_from_stability }
        multiply_temp_variable = { chaos_change = -1 }

        if = {
            limit = {
                OR = {
                    check_variable = { var = chaos_change value = @MIN_CASUALTY_CHANGE_K compare = greater_than_or_equals }
                    AND = {
                        check_variable = { chaos_change < 0 }
                        set_temp_variable = { neg_threshold = @MIN_CASUALTY_CHANGE_K }
                        multiply_temp_variable = { neg_threshold = -1 }
                        check_variable = { var = chaos_change value = neg_threshold compare = less_than_or_equals }
                    }
                }
            }
            add_chaos_meter_value = yes

            if = {
                limit = { check_variable = { stability_change > 0 } }
                log = "CHAOS METER: World stability improved by [?abs_stability_change] ([?chaos_change|=] chaos)"
            }
            else = {
                log = "CHAOS METER: World stability decreased by [?abs_stability_change] ([?chaos_change|=] chaos)"
            }
        }

        set_variable = { global.last_average_stability = current_average_stability }
    }
}

chaos_meter_update_democracy = {
    set_temp_variable = { current_total_democracy = 0 }
    set_temp_variable = { current_country_count = 0 }

    every_country = {
        if = {
            limit = { has_government = democratic }
            add_to_temp_variable = { current_total_democracy = 1 }
        }
        add_to_temp_variable = { current_country_count = 1 }
    }

    set_temp_variable = { current_average_democracy = 0 }
    if = {
        limit = { check_variable = { current_country_count > 0 } }
        set_temp_variable = { current_average_democracy = current_total_democracy }
        divide_temp_variable = { current_average_democracy = current_country_count }
    }

    set_temp_variable = { democracy_change = current_average_democracy }
    subtract_from_temp_variable = { democracy_change = global.last_average_democracy }
    set_temp_variable = { abs_democracy_change = democracy_change }

    if = {
        limit = { check_variable = { democracy_change < 0 } }
        multiply_temp_variable = { abs_democracy_change = -1 }
    }

    if = {
        limit = { check_variable = { abs_democracy_change > @DEMOCRACY_CHANGE_PER_CHAOS } }
        set_temp_variable = { chaos_from_democracy = democracy_change }
        divide_temp_variable = { chaos_from_democracy = @DEMOCRACY_CHANGE_PER_CHAOS }
        round_temp_variable = chaos_from_democracy
        set_temp_variable = { chaos_change = chaos_from_democracy }
        multiply_temp_variable = { chaos_change = -1 } # Inverted: more democracy = less chaos

        if = {
            limit = {
                OR = {
                    check_variable = { var = chaos_change value = @MIN_CASUALTY_CHANGE_K compare = greater_than_or_equals }
                    AND = {
                        check_variable = { chaos_change < 0 }
                        set_temp_variable = { neg_threshold = @MIN_CASUALTY_CHANGE_K }
                        multiply_temp_variable = { neg_threshold = -1 }
                        check_variable = { var = chaos_change value = neg_threshold compare = less_than_or_equals }
                    }
                }
            }
            add_chaos_meter_value = yes

            if = {
                limit = { check_variable = { democracy_change > 0 } }
                log = "CHAOS METER: World democracy increased by [?abs_democracy_change|.0%] ([?chaos_change|=] chaos)"
            }
            else = {
                log = "CHAOS METER: World democracy decreased by [?abs_democracy_change|.0%] ([?chaos_change|=] chaos)"
            }
        }

        set_variable = { global.last_average_democracy = current_average_democracy }
    }
}
