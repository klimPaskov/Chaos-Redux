# ============================================================================
# CHAOS REDUX - CHAOS METER EFFECTS
# ============================================================================
# This file contains all scripted effects for the chaos meter system.
# ============================================================================

# ============================================================================
# INITIALIZATION
# ============================================================================

initialize_chaos_meter_system = {
    # Initialize chaos meter value
    set_variable = { var = global.chaos_meter_value value = 0 }

    set_variable = { global.chaos_per_world_tension = 1 }
    set_variable = { global.chaos_per_minor_war = 1 }
    set_variable = { global.chaos_per_major_war = 5 }
    set_variable = { global.chaos_per_minor_peace = -2 }
    set_variable = { global.chaos_per_major_peace = -5 }
    set_variable = { global.chaos_per_minor_annex = 5 }
    set_variable = { global.chaos_per_major_annex = 10 }
    set_variable = { global.chaos_per_puppet = 3 }
    set_variable = { global.chaos_per_liberate = -2 }
    set_variable = { global.chaos_per_liberate_democratic = -5 }
    set_variable = { global.chaos_per_release_free = -5 }
    set_variable = { global.chaos_per_subject_free = -3 }
    set_variable = { global.chaos_per_subject_annexed = 2 }
    set_variable = { global.chaos_per_nuke = 2 }
    set_variable = { global.casualties_per_chaos = 250 } # 250k casualties = 1 chaos
    set_variable = { global.chaos_per_mobilization_up_major = 1 }
    set_variable = { global.chaos_per_mobilization_down_major = -1 }
    set_variable = { global.chaos_per_coup_minor = 1 }
    set_variable = { global.chaos_per_coup_major = 3 }
    set_variable = { global.chaos_per_civil_war_minor = 1 }
    set_variable = { global.chaos_per_civil_war_major = 5 }
    set_variable = { global.chaos_per_ideology_change_minor_democratic = -2 }
    set_variable = { global.chaos_per_ideology_change_minor_non_democratic = 1 }
    set_variable = { global.chaos_per_ideology_change_major_democratic = -5 }
    set_variable = { global.chaos_per_ideology_change_major_non_democratic = 5 }
    set_variable = { global.chaos_per_faction_create = 3 }
    set_variable = { global.chaos_per_faction_disband = -3 }
    set_variable = { global.chaos_per_faction_join_minor = 1 }
    set_variable = { global.chaos_per_faction_join_major = 5 }
    set_variable = { global.chaos_per_faction_leave_minor = -1 }
    set_variable = { global.chaos_per_faction_leave_major = -5 }
    set_variable = { global.chaos_per_faction_join_both_democratic_minor = -1 }
    set_variable = { global.chaos_per_faction_join_both_democratic_major = -5 }
    set_variable = { global.chaos_per_faction_leave_both_democratic_minor = -1 }
    set_variable = { global.chaos_per_faction_leave_both_democratic_major = -5 }
    set_variable = { global.chaos_per_justifying_wargoal_major = 1 }
    set_variable = { global.chaos_per_guarantee_major = 1 }
    set_variable = { global.chaos_per_wargoal_expire_major = -1 }
    set_variable = { global.chaos_per_send_attache_major = 1 }
    set_variable = { global.chaos_per_military_access_given_major = 1 }
    set_variable = { global.chaos_per_military_access_revoked_major = -1 }

    # Subtle diplomatic/military actions (±1 chaos)
    set_variable = { global.chaos_per_lend_lease = 1 }
    set_variable = { global.chaos_per_call_allies = 1 }
    set_variable = { global.chaos_per_join_allies = 1 }
    set_variable = { global.chaos_per_new_term_election = -1 }
    set_variable = { global.chaos_per_stage_coup = 1 }
    set_variable = { global.chaos_per_coup_succeeded = 1 }
    set_variable = { global.chaos_per_capitulation = 1 }
    set_variable = { global.chaos_per_uncapitulation = -1 }
    set_variable = { global.chaos_per_government_exiled = 1 }
    set_variable = { global.chaos_per_exile_reinstated = -3 }

    set_variable = { global.mils_per_chaos_increase = 50 } # 50 mils = +1 chaos
    set_variable = { global.divisions_per_chaos_increase = 100 } # 100 divisions = +1 chaos
    set_variable = { global.stability_change_per_chaos = 0.01 } # 1% stability change = ±1 chaos

    # Initialize chaos timer modifier variables (for integration with event system)
    set_variable = { global.chaos_timer_modifier_calm = 1.0 }
    set_variable = { global.chaos_timer_modifier_gathering_storm = 0.9 }
    set_variable = { global.chaos_timer_modifier_rising_chaos = 0.8 }
    set_variable = { global.chaos_timer_modifier_chaos_tier = 0.7 }
    set_variable = { global.chaos_timer_modifier_totalen_chaos = 0.6 }
    set_variable = { global.chaos_timer_modifier = 1.0 } # Current active modifier

    # Initialize chaos tier boundaries (dynamic values for entire system)
    set_variable = { global.chaos_tier_gathering_boundary = 200 }
    set_variable = { global.chaos_tier_rising_boundary = 400 }
    set_variable = { global.chaos_tier_chaos_boundary = 600 }
    set_variable = { global.chaos_tier_critical_boundary = 800 }
    set_variable = { global.chaos_tier_collapse_boundary = 1000 }

    # Initialize tracking variables
    set_variable = { global.last_casualty_count = 0 }
    set_variable = { global.highest_world_tension_recorded = 0 }
    set_variable = { global.current_world_tension = 0 }
    set_variable = { global.last_total_mils = 0 }
    set_variable = { global.last_total_divisions = 0 }
    set_variable = { global.last_average_stability = 0 }
    set_variable = { global.total_countries_for_stability = 0 }
    every_country = {
        limit = { NOT = { tag = ZZZ } } # Exclude Zombies (because they pump out a lot of divisions)
        add_to_variable = { global.last_total_divisions = num_armies }
        add_to_variable = { global.last_average_stability = stability }
        add_to_variable = { global.total_countries_for_stability = 1 }
        add_to_variable = { global.last_total_mils = num_of_military_factories }
    }
    # Calculate initial average stability
    if = {
        limit = { check_variable = { var = global.total_countries_for_stability value = 0 compare = greater_than } }
        divide_variable = { var = global.last_average_stability value = global.total_countries_for_stability }
    }

    # Initialize chaos meter tiers
    update_chaos_meter_tier = yes

    log = "CHAOS METER: System initialized with value [?global.chaos_meter_value]"
}

# ============================================================================
# CHAOS METER VALUE MANAGEMENT
# ============================================================================

add_chaos_meter_value = {
    # Input: temp variable chaos_change
    if = {
        limit = { check_variable = { var = global.chaos_meter_value value = 1000 compare = less_than } }

        # Round chaos_change to integer
        round_temp_variable = chaos_change

        add_to_variable = { var = global.chaos_meter_value value = chaos_change }

        # Ensure chaos doesn't go below 0
        if = {
            limit = { check_variable = { var = global.chaos_meter_value value = 0 compare = less_than } }
            set_variable = { var = global.chaos_meter_value value = 0 }
        }

        # Round final chaos meter value to integer
        round_variable = global.chaos_meter_value

        # Update tier flags
        update_chaos_meter_tier = yes

        if = {
            limit = { check_variable = { var = chaos_change value = 0 compare = greater_than } }
            log = "CHAOS METER: Increased by [?chaos_change] to [?global.chaos_meter_value]"
        }
        else = {
            set_temp_variable = { var = abs_change value = chaos_change }
            multiply_temp_variable = { var = abs_change value = -1 }
            log = "CHAOS METER: Decreased by [?abs_change] to [?global.chaos_meter_value]"
        }
    }
    else = {
        log = "CHAOS METER: World Collapse active - chaos meter locked at [?global.chaos_meter_value]"
    }
}

update_chaos_meter_tier = {
    # Store current tier state before clearing
    set_temp_variable = { old_tier_collapse = 0 }
    set_temp_variable = { old_tier_critical = 0 }
    set_temp_variable = { old_tier_chaos = 0 }
    set_temp_variable = { old_tier_rising = 0 }
    set_temp_variable = { old_tier_gathering = 0 }
    set_temp_variable = { old_tier_calm = 0 }

    if = { limit = { has_global_flag = chaos_tier_collapse } set_temp_variable = { old_tier_collapse = 1 } }
    if = { limit = { has_global_flag = chaos_tier_critical } set_temp_variable = { old_tier_critical = 1 } }
    if = { limit = { has_global_flag = chaos_tier_chaos } set_temp_variable = { old_tier_chaos = 1 } }
    if = { limit = { has_global_flag = chaos_tier_rising } set_temp_variable = { old_tier_rising = 1 } }
    if = { limit = { has_global_flag = chaos_tier_gathering } set_temp_variable = { old_tier_gathering = 1 } }
    if = { limit = { has_global_flag = chaos_tier_calm } set_temp_variable = { old_tier_calm = 1 } }

    # Clear all tier flags
    clr_global_flag = chaos_tier_calm
    clr_global_flag = chaos_tier_gathering
    clr_global_flag = chaos_tier_rising
    clr_global_flag = chaos_tier_chaos
    clr_global_flag = chaos_tier_critical
    clr_global_flag = chaos_tier_collapse

    if = {
        limit = { check_variable = { var = global.chaos_meter_value value = global.chaos_tier_collapse_boundary compare = greater_than_or_equals } }
        set_global_flag = chaos_tier_collapse
        if = {
            limit = { check_variable = { old_tier_collapse = 0 } }
            log = "CHAOS METER: Tier changed to WORLD COLLAPSE"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = global.chaos_tier_critical_boundary compare = greater_than_or_equals } }
        set_global_flag = chaos_tier_critical
        if = {
            limit = { check_variable = { old_tier_critical = 0 } }
            log = "CHAOS METER: Tier changed to TOTALEN CHAOS"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = global.chaos_tier_chaos_boundary compare = greater_than_or_equals } }
        set_global_flag = chaos_tier_chaos
        if = {
            limit = { check_variable = { old_tier_chaos = 0 } }
            log = "CHAOS METER: Tier changed to CHAOS TIER"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = global.chaos_tier_rising_boundary compare = greater_than_or_equals } }
        set_global_flag = chaos_tier_rising
        if = {
            limit = { check_variable = { old_tier_rising = 0 } }
            log = "CHAOS METER: Tier changed to RISING CHAOS"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
    else_if = {
        limit = { check_variable = { var = global.chaos_meter_value value = global.chaos_tier_gathering_boundary compare = greater_than_or_equals } }
        set_global_flag = chaos_tier_gathering
        if = {
            limit = { check_variable = { old_tier_gathering = 0 } }
            log = "CHAOS METER: Tier changed to GATHERING STORM"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
    else = {
        set_global_flag = chaos_tier_calm
        if = {
            limit = { check_variable = { old_tier_calm = 0 } }
            log = "CHAOS METER: Tier changed to CALM WORLD"
            # Recalculate event timer due to chaos tier change
            calculate_next_timer_value = yes
        }
    }
}

# ============================================================================
# ON ACTION HANDLERS
# ============================================================================

chaos_meter_on_war_relation_added = {
    # on_war_relation_added: ROOT = attacker, FROM = defender
    if = {
        limit = { ROOT = { is_major = yes } }
        set_temp_variable = { var = chaos_change value = global.chaos_per_major_war }
        log = "CHAOS METER: Major [ROOT.GetName] declared war on [FROM.GetName] (+[?global.chaos_per_major_war] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_minor_war }
        log = "CHAOS METER: Minor [ROOT.GetName] declared war on [FROM.GetName] (+[?global.chaos_per_minor_war] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_peace = {
    # on_peace has no FROM scope - THIS is the country that is no longer at war
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_major_peace }
        log = "CHAOS METER: Major [THIS.GetName] made peace ([?global.chaos_per_major_peace] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_minor_peace }
        log = "CHAOS METER: Minor [THIS.GetName] made peace ([?global.chaos_per_minor_peace] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_annex = {
    # Check if annexed country is major or minor
    if = {
        limit = { FROM = { is_major = yes } }
        set_temp_variable = { var = chaos_change value = global.chaos_per_major_annex }
        log = "CHAOS METER: Major [FROM.GetName] was annexed by [THIS.GetName] (+[?global.chaos_per_major_annex] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_minor_annex }
        log = "CHAOS METER: Minor [FROM.GetName] was annexed by [THIS.GetName] (+[?global.chaos_per_minor_annex] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_puppet = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_puppet }
    log = "CHAOS METER: [FROM.GetName] was puppeted by [THIS.GetName] (+[?global.chaos_per_puppet] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_liberate = {
    # Check if liberator is democratic
    if = {
        limit = { has_government = democratic }
        set_temp_variable = { var = chaos_change value = global.chaos_per_liberate_democratic }
        log = "CHAOS METER: Democratic [THIS.GetName] liberated [FROM.GetName] ([?global.chaos_per_liberate_democratic] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_liberate }
        log = "CHAOS METER: [THIS.GetName] liberated [FROM.GetName] ([?global.chaos_per_liberate] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_release_as_free = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_release_free }
    log = "CHAOS METER: [FROM.GetName] was released as free nation by [THIS.GetName] ([?global.chaos_per_release_free] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_subject_free = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_subject_free }
    log = "CHAOS METER: [THIS.GetName] became free from subject status ([?global.chaos_per_subject_free] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_subject_annexed = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_subject_annexed }
    log = "CHAOS METER: Subject [FROM.GetName] was annexed by [THIS.GetName] (+[?global.chaos_per_subject_annexed] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_nuke_drop = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_nuke }
    log = "CHAOS METER: Nuclear weapon dropped by [THIS.GetName] on [FROM.GetName] (+[?global.chaos_per_nuke] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_mobilization_law_change = {
    # Check if mobilization law was increased or decreased
    if = {
        limit = {
            # This would need to be implemented with a country variable tracking previous mobilization level
            # For now, assume increase if called from appropriate context
            always = yes
        }

        if = {
            limit = { is_major = yes }
            set_temp_variable = { var = chaos_change value = global.chaos_per_mobilization_up_major }
            log = "CHAOS METER: Major [THIS.GetName] increased mobilization law (+[?global.chaos_per_mobilization_up_major] chaos)"
        }
        else = {
            set_temp_variable = { var = chaos_change value = global.chaos_per_mobilization_up_minor }
            log = "CHAOS METER: Minor [THIS.GetName] increased mobilization law (+[?global.chaos_per_mobilization_up_minor] chaos)"
        }

        add_chaos_meter_value = yes
    }
}

chaos_meter_on_coup = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_coup_major }
        log = "CHAOS METER: Coup in major power [THIS.GetName] (+[?global.chaos_per_coup_major] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_coup_minor }
        log = "CHAOS METER: Coup in minor power [THIS.GetName] (+[?global.chaos_per_coup_minor] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_civil_war = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_civil_war_major }
        log = "CHAOS METER: Civil war started in major power [THIS.GetName] (+[?global.chaos_per_civil_war_major] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_civil_war_minor }
        log = "CHAOS METER: Civil war started in minor power [THIS.GetName] (+[?global.chaos_per_civil_war_minor] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_ideology_change = {
    # The ruling party change triggers after the change, so we detect the new ideology
    if = {
        limit = {
            is_major = yes
            has_government = democratic
        }
        set_temp_variable = { var = chaos_change value = global.chaos_per_ideology_change_major_democratic }
        log = "CHAOS METER: Major power [THIS.GetName] changed to democratic ideology ([?global.chaos_per_ideology_change_major_democratic] chaos)"
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_ideology_change_major_non_democratic }
        log = "CHAOS METER: Major power [THIS.GetName] changed to non-democratic ideology (+[?global.chaos_per_ideology_change_major_non_democratic] chaos)"
    }
    else_if = {
        limit = { has_government = democratic }
        set_temp_variable = { var = chaos_change value = global.chaos_per_ideology_change_minor_democratic }
        log = "CHAOS METER: Minor power [THIS.GetName] changed to democratic ideology ([?global.chaos_per_ideology_change_minor_democratic] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_ideology_change_minor_non_democratic }
        log = "CHAOS METER: Minor power [THIS.GetName] changed to non-democratic ideology (+[?global.chaos_per_ideology_change_minor_non_democratic] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_created = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_faction_create }
    log = "CHAOS METER: [THIS.GetName] created a faction (+[?global.chaos_per_faction_create] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_disbanded = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_faction_disband }
    log = "CHAOS METER: Faction disbanded ([?global.chaos_per_faction_disband] chaos)"

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_join = {
    # Check if both joining country and faction leader are democratic
    set_temp_variable = { var = both_democratic value = 0 }
    if = {
        limit = {
            has_government = democratic
            faction_leader = { has_government = democratic }
        }
        set_temp_variable = { var = both_democratic value = 1 }
    }

    if = {
        limit = {
            is_major = yes
            check_variable = { var = both_democratic value = 1 }
        }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_join_both_democratic_major }
        log = "CHAOS METER: Major democratic power [THIS.GetName] joined democratic faction led by [faction_leader.GetName] ([?global.chaos_per_faction_join_both_democratic_major] chaos)"
    }
    else_if = {
        limit = {
            check_variable = { var = both_democratic value = 1 }
        }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_join_both_democratic_minor }
        log = "CHAOS METER: Minor democratic power [THIS.GetName] joined democratic faction led by [faction_leader.GetName] ([?global.chaos_per_faction_join_both_democratic_minor] chaos)"
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_join_major }
        log = "CHAOS METER: Major power [THIS.GetName] joined faction led by [faction_leader.GetName] (+[?global.chaos_per_faction_join_major] chaos)"
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_join_minor }
        log = "CHAOS METER: Minor power [THIS.GetName] joined faction led by [faction_leader.GetName] (+[?global.chaos_per_faction_join_minor] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_faction_leave = {
    # Check if both leaving country and current faction leader are democratic
    set_temp_variable = { var = both_democratic value = 0 }
    if = {
        limit = {
            has_government = democratic
            faction_leader = { has_government = democratic }
        }
        set_temp_variable = { var = both_democratic value = 1 }
    }

    # Store faction leader name for logging
    set_temp_variable = { var = faction_leader_tag value = faction_leader }

    # No effect for democratic countries leaving democratic factions
    if = {
        limit = {
            has_government = democratic
            check_variable = { var = both_democratic value = 1 }
        }
        log = "CHAOS METER: Democratic power [THIS.GetName] left democratic faction (no chaos effect)"
    }
    else_if = {
        limit = {
            is_major = yes
            check_variable = { var = both_democratic value = 1 }
        }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_leave_both_democratic_major }
        log = "CHAOS METER: Major power [THIS.GetName] left democratic faction ([?global.chaos_per_faction_leave_both_democratic_major] chaos)"
        add_chaos_meter_value = yes
    }
    else_if = {
        limit = {
            check_variable = { var = both_democratic value = 1 }
        }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_leave_both_democratic_minor }
        log = "CHAOS METER: Minor power [THIS.GetName] left democratic faction ([?global.chaos_per_faction_leave_both_democratic_minor] chaos)"
        add_chaos_meter_value = yes
    }
    else_if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_leave_major }
        log = "CHAOS METER: Major power [THIS.GetName] left faction ([?global.chaos_per_faction_leave_major] chaos)"
        add_chaos_meter_value = yes
    }
    else = {
        set_temp_variable = { var = chaos_change value = global.chaos_per_faction_leave_minor }
        log = "CHAOS METER: Minor power [THIS.GetName] left faction ([?global.chaos_per_faction_leave_minor] chaos)"
        add_chaos_meter_value = yes
    }
}


chaos_meter_on_justifying_wargoal = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_justifying_wargoal_major }
        log = "CHAOS METER: Major power [THIS.GetName] is justifying war goal against [FROM.GetName] (+[?global.chaos_per_justifying_wargoal_major] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_guarantee = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_guarantee_major }
        log = "CHAOS METER: Major power [THIS.GetName] guaranteed independence of [FROM.GetName] (+[?global.chaos_per_guarantee_major] chaos)"
    }

    add_chaos_meter_value = yes
}

chaos_meter_on_military_access_granted = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_military_access_given_major }
        log = "CHAOS METER: Major power [THIS.GetName] granted military access to [FROM.GetName] (+[?global.chaos_per_military_access_given_major] chaos)"
    }
    add_chaos_meter_value = yes
}

chaos_meter_on_military_access_revoked = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_military_access_revoked_major }
        log = "CHAOS METER: Major power [THIS.GetName] revoked military access from [FROM.GetName] ([?global.chaos_per_military_access_revoked_major] chaos)"
    }
    add_chaos_meter_value = yes
}

chaos_meter_on_wargoal_expire = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_wargoal_expire_major }
        log = "CHAOS METER: Major power [THIS.GetName] had war goal against [FROM.GetName] expire ([?global.chaos_per_wargoal_expire_major] chaos)"
    }
    add_chaos_meter_value = yes
}

chaos_meter_on_send_attache = {
    if = {
        limit = { is_major = yes }
        set_temp_variable = { var = chaos_change value = global.chaos_per_send_attache_major }
        log = "CHAOS METER: Major power [THIS.GetName] sent attache to [FROM.GetName] (+[?global.chaos_per_send_attache_major] chaos)"
    }
    add_chaos_meter_value = yes
}


chaos_meter_on_lend_lease = {
    if = {
        limit = { ROOT = { is_major = yes } }
        set_temp_variable = { var = chaos_change value = global.chaos_per_lend_lease }
        log = "CHAOS METER: [THIS.GetName] provided lend-lease to [FROM.GetName] (+[?global.chaos_per_lend_lease] chaos)"
        add_chaos_meter_value = yes
    }
}

chaos_meter_on_call_allies = {
    if = {
        limit = { FROM = { is_subject = no } }
        set_temp_variable = { var = chaos_change value = global.chaos_per_call_allies }
        log = "CHAOS METER: [THIS.GetName] called allies into war against [FROM.GetName] (+[?global.chaos_per_call_allies] chaos)"
        add_chaos_meter_value = yes
    }
}

chaos_meter_on_join_allies = {
    if = {
        limit = { ROOT = { is_subject = no } }
        set_temp_variable = { var = chaos_change value = global.chaos_per_join_allies }
        log = "CHAOS METER: [THIS.GetName] joined allies in war (+[?global.chaos_per_join_allies] chaos)"
        add_chaos_meter_value = yes
    }
}

chaos_meter_on_new_term_election = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_new_term_election }
    log = "CHAOS METER: [THIS.GetName] held democratic elections ([?global.chaos_per_new_term_election] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_stage_coup = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_stage_coup }
    log = "CHAOS METER: [THIS.GetName] staged coup attempt in [FROM.GetName] (+[?global.chaos_per_stage_coup] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_coup_succeeded = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_coup_succeeded }
    log = "CHAOS METER: Coup succeeded in [THIS.GetName] (+[?global.chaos_per_coup_succeeded] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_capitulation = {
    set_temp_variable = { var = chaos_change value = global.chaos_per_capitulation }
    log = "CHAOS METER: [THIS.GetName] capitulated to [FROM.GetName] (+[?global.chaos_per_capitulation] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_uncapitulation = {
    # on_uncapitulation: ROOT = country affected (no FROM)
    set_temp_variable = { var = chaos_change value = global.chaos_per_uncapitulation }
    log = "CHAOS METER: [ROOT.GetName] was liberated from capitulation ([?global.chaos_per_uncapitulation] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_government_exiled = {
    # on_government_exiled: ROOT = exile government, FROM = host country
    set_temp_variable = { var = chaos_change value = global.chaos_per_government_exiled }
    log = "CHAOS METER: Government of [ROOT.GetName] went into exile in [FROM.GetName] (+[?global.chaos_per_government_exiled] chaos)"
    add_chaos_meter_value = yes
}

chaos_meter_on_exile_reinstated = {
    # on_exile_government_reinstated: ROOT = government, FROM = former host
    set_temp_variable = { var = chaos_change value = global.chaos_per_exile_reinstated }
    log = "CHAOS METER: Exiled government of [ROOT.GetName] was reinstated from [FROM.GetName] ([?global.chaos_per_exile_reinstated] chaos)"
    add_chaos_meter_value = yes
}







##############################################################################################################

#  ######     #    ### #       #     #    #     # ######  ######     #    ####### #######  #####
#  #     #   # #    #  #        #   #     #     # #     # #     #   # #      #    #       #     #
#  #     #  #   #   #  #         # #      #     # #     # #     #  #   #     #    #       #
#  #     # #     #  #  #          #       #     # ######  #     # #     #    #    #####    #####
#  #     # #######  #  #          #       #     # #       #     # #######    #    #             #
#  #     # #     #  #  #          #       #     # #       #     # #     #    #    #       #     #
#  ######  #     # ### #######    #        #####  #       ######  #     #    #    #######  #####

##############################################################################################################


chaos_meter_daily_update = {
    chaos_meter_update_world_tension = yes
    chaos_meter_update_casualties = yes
    chaos_meter_update_factories = yes
    chaos_meter_update_divisions = yes
    chaos_meter_update_stability = yes
}

chaos_meter_update_world_tension = {
    # Calculate current world tension as percentage (global.threat is 0-1, convert to 0-100)
    set_temp_variable = { var = current_world_tension value = global.threat }
    multiply_temp_variable = { var = current_world_tension value = 100 }

    # Round to integer percentage for cleaner tracking
    round_temp_variable = current_world_tension

    # Update the current world tension variable
    set_variable = { var = global.current_world_tension value = current_world_tension }

    # Check if current tension is higher than our recorded peak
    if = {
        limit = { check_variable = { var = current_world_tension value = global.highest_world_tension_recorded compare = greater_than } }

        # Calculate how much higher the tension got
        set_temp_variable = { var = tension_increase value = current_world_tension }
        subtract_from_temp_variable = { var = tension_increase value = global.highest_world_tension_recorded }

        # Only count if the increase is at least 1% (to avoid sub-1% fluctuations)
        if = {
            limit = { check_variable = { var = tension_increase value = 1 compare = greater_than_or_equals } }

            # Add chaos for the tension increase
            set_temp_variable = { var = chaos_change value = tension_increase }
            multiply_temp_variable = { var = chaos_change value = global.chaos_per_world_tension }

            add_chaos_meter_value = yes

            log = "CHAOS METER: World tension increased from [?global.highest_world_tension_recorded]% to [?current_world_tension]% (+[?chaos_change] chaos)"

            # Update the highest recorded tension
            set_variable = { var = global.highest_world_tension_recorded value = current_world_tension }
        }
    }
    # Check if current tension is lower than our recorded peak
    else_if = {
        limit = { check_variable = { var = current_world_tension value = global.highest_world_tension_recorded compare = less_than } }

        # Calculate how much the tension dropped from the peak
        set_temp_variable = { var = tension_decrease value = global.highest_world_tension_recorded }
        subtract_from_temp_variable = { var = tension_decrease value = current_world_tension }

        # Only count if the decrease is at least 1% (to avoid sub-1% fluctuations)
        if = {
            limit = { check_variable = { var = tension_decrease value = 1 compare = greater_than_or_equals } }

            # Round down the decrease to integer
            round_temp_variable = tension_decrease

            # Reduce chaos for the tension decrease
            set_temp_variable = { var = chaos_change value = tension_decrease }
            multiply_temp_variable = { var = chaos_change value = global.chaos_per_world_tension }
            multiply_temp_variable = { var = chaos_change value = -1 } # Make it negative for decrease

            add_chaos_meter_value = yes

            set_temp_variable = { wt_decreased_from = current_world_tension }
            add_to_temp_variable = { wt_decreased_from = tension_decrease }
            log = "CHAOS METER: World tension decreased from [?wt_decreased_from]% to [?current_world_tension]% ([?chaos_change] chaos)"

            # Update the highest recorded tension to current tension to prevent repeated decreases
            # This ensures we only decrease chaos once for each drop, not repeatedly
            set_variable = { var = global.highest_world_tension_recorded value = current_world_tension }
        }
    }
}

chaos_meter_update_casualties = {
    # Get current total casualties (in thousands)
    set_temp_variable = { var = current_casualties value = 0 }

    # Sum all countries' casualties
    every_country = {
        add_to_temp_variable = { var = current_casualties value = casualties }
    }

    # Convert to thousands and check for increase
    divide_temp_variable = { var = current_casualties value = 1000 }
    set_temp_variable = { var = casualty_increase value = current_casualties }
    subtract_from_temp_variable = { var = casualty_increase value = global.last_casualty_count }

    # Calculate chaos increase based on casualties
    if = {
        limit = { check_variable = { var = casualty_increase value = global.casualties_per_chaos compare = greater_than_or_equals } }

        set_temp_variable = { var = chaos_from_casualties value = casualty_increase }
        divide_temp_variable = { var = chaos_from_casualties value = global.casualties_per_chaos }

        # Round down to integer
        set_temp_variable = { var = chaos_change value = chaos_from_casualties }

        if = {
            limit = { check_variable = { var = chaos_change value = 1 compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Increased by [?chaos_change] due to [?casualty_increase]k new casualties"
        }

        # Update last casualty count
        set_variable = { var = global.last_casualty_count value = current_casualties }
    }
}

chaos_meter_update_factories = {
    # Count total factories globally
    set_temp_variable = { var = current_total_mils value = 0 }

    every_country = {
        add_to_temp_variable = { var = current_total_mils value = num_of_military_factories }
    }

    # Calculate military factory changes
    set_temp_variable = { var = mil_change value = current_total_mils }
    subtract_from_temp_variable = { var = mil_change value = global.last_total_mils }

    if = {
        limit = { check_variable = { var = mil_change value = global.mils_per_chaos_increase compare = greater_than_or_equals } }

        set_temp_variable = { var = chaos_from_mils value = mil_change }
        divide_temp_variable = { var = chaos_from_mils value = global.mils_per_chaos_increase }

        # Military factories increase chaos (arms buildup)
        set_temp_variable = { var = chaos_change value = chaos_from_mils }

        if = {
            limit = { check_variable = { var = chaos_change value = 1 compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Arms buildup from [?mil_change] new military factories (+[?chaos_change] chaos)"
        }

        set_variable = { var = global.last_total_mils value = current_total_mils }
    }
}

chaos_meter_update_divisions = {
    # Count total divisions globally (excluding ZZZ tag)
    set_temp_variable = { var = current_total_divisions value = 0 }

    every_country = {
        limit = { NOT = { tag = ZZZ } } # Exclude ZZZ tag
        add_to_temp_variable = { var = current_total_divisions value = num_armies }
    }

    # Calculate division changes
    set_temp_variable = { var = division_change value = current_total_divisions }
    subtract_from_temp_variable = { var = division_change value = global.last_total_divisions }

    if = {
        limit = { check_variable = { var = division_change value = global.divisions_per_chaos_increase compare = greater_than_or_equals } }

        set_temp_variable = { var = chaos_from_divisions value = division_change }
        divide_temp_variable = { var = chaos_from_divisions value = global.divisions_per_chaos_increase }

        # Round down to integer
        round_temp_variable = chaos_from_divisions

        # Division buildup increases chaos (militarization)
        set_temp_variable = { var = chaos_change value = chaos_from_divisions }

        if = {
            limit = { check_variable = { var = chaos_change value = 1 compare = greater_than_or_equals } }
            add_chaos_meter_value = yes
            log = "CHAOS METER: Military buildup from [?division_change] new divisions (+[?chaos_change] chaos)"
        }

        set_variable = { var = global.last_total_divisions value = current_total_divisions }
    }
}

chaos_meter_update_stability = {
    # Calculate current world average stability
    set_temp_variable = { var = current_total_stability value = 0 }
    set_temp_variable = { var = current_country_count value = 0 }

    every_country = {
        limit = { NOT = { tag = ZZZ } } # Exclude Zombies
        add_to_temp_variable = { var = current_total_stability value = stability }
        add_to_temp_variable = { var = current_country_count value = 1 }
    }

    # Calculate current average stability
    set_temp_variable = { var = current_average_stability value = 0 }
    if = {
        limit = { check_variable = { var = current_country_count value = 0 compare = greater_than } }
        set_temp_variable = { var = current_average_stability value = current_total_stability }
        divide_temp_variable = { var = current_average_stability value = current_country_count }
    }

    # Calculate stability change
    set_temp_variable = { var = stability_change value = current_average_stability }
    subtract_from_temp_variable = { var = stability_change value = global.last_average_stability }

    # Check if stability changed by threshold amount (0.1 = 10%)
    set_temp_variable = { var = abs_stability_change value = stability_change }
    if = {
        limit = { check_variable = { var = stability_change value = 0 compare = less_than } }
        multiply_temp_variable = { var = abs_stability_change value = -1 }
    }

    if = {
        limit = { check_variable = { var = abs_stability_change value = global.stability_change_per_chaos compare = greater_than_or_equals } }

        # Calculate chaos change based on stability direction
        set_temp_variable = { var = chaos_from_stability value = stability_change }
        divide_temp_variable = { var = chaos_from_stability value = global.stability_change_per_chaos }

        # Round to integer
        round_temp_variable = chaos_from_stability

        # Stability decrease = positive chaos, stability increase = negative chaos
        set_temp_variable = { var = chaos_change value = chaos_from_stability }
        multiply_temp_variable = { var = chaos_change value = -1 }

        if = {
            limit = {
                OR = {
                    check_variable = { var = chaos_change value = 1 compare = greater_than_or_equals }
                    check_variable = { var = chaos_change value = -1 compare = less_than_or_equals }
                }
            }
            add_chaos_meter_value = yes

            if = {
                limit = { check_variable = { var = stability_change value = 0 compare = greater_than } }
                log = "CHAOS METER: World stability improved by [?abs_stability_change] ([?chaos_change] chaos)"
            }
            else = {
                log = "CHAOS METER: World stability decreased by [?abs_stability_change] (+[?chaos_change] chaos)"
            }
        }

        set_variable = { var = global.last_average_stability value = current_average_stability }
    }
}
